grep -v "win32, win32, x86" gpd/build.conf/build.properties | \
grep -v "macosx, carbon, ppc" | \
grep -v "aix, motif, ppc" | \
grep -v "hpux, motif, PA_RISC" | \
grep -v "linux, gtk, ppc" | \
grep -v "linux, gtk, x86" | \
grep -v "linux, gtk, x86_64" | \
grep -v "linux, motif, x86" | \
grep -v "solaris, gtk, sparc" | \
grep -v "configs= " | \
grep -v "solaris, motif, sparc" > test
mv test gpd/build.conf/build.properties
if [ "%{_arch}" = "i586" ]; then
    echo "configs=linux, gtk, x86" >> gpd/build.conf/build.properties
elif [ "%{_arch}" = "i486" ]; then
    echo "configs=linux, gtk, x86" >> gpd/build.conf/build.properties
elif [ "%{_arch}" = "i386" ]; then
    echo "configs=linux, gtk, x86" >> gpd/build.conf/build.properties
elif [ "%{_arch}" = "i686" ]; then
    echo "configs=linux, gtk, x86" >> gpd/build.conf/build.properties
elif [ "%{_arch}" = "pentium2" ]; then
    echo "configs=linux, gtk, x86" >> gpd/build.conf/build.properties
elif [ "%{_arch}" = "pentium3" ]; then
    echo "configs=linux, gtk, x86" >> gpd/build.conf/build.properties
elif [ "%{_arch}" = "pentium4" ]; then
    echo "configs=linux, gtk, x86" >> gpd/build.conf/build.properties
elif [ "%{_arch}" = "athlon" ]; then
    echo "configs=linux, gtk, x86" >> gpd/build.conf/build.properties
elif [ "%{_arch}" = "athlon_xp" ]; then
    echo "configs=linux, gtk, x86" >> gpd/build.conf/build.properties
elif [ "%{_arch}" = "k6" ]; then
    echo "configs=linux, gtk, x86" >> gpd/build.conf/build.properties
else 
    echo "configs=linux, gtk, x86_64" >> gpd/build.conf/build.properties
fi
cd gpd 
ant
cd ..

if [ "%{_arch}" = "i586" ]; then
    unzip gpd/build/runa-gpd-dev-linux.gtk.x86.zip
elif [ "%{_arch}" = "i486" ]; then
    unzip gpd/build/runa-gpd-dev-linux.gtk.x86.zip
elif [ "%{_arch}" = "i386" ]; then
    unzip gpd/build/runa-gpd-dev-linux.gtk.x86.zip
elif [ "%{_arch}" = "i686" ]; then
    unzip gpd/build/runa-gpd-dev-linux.gtk.x86.zip
elif [ "%{_arch}" = "pentium2" ]; then
    unzip gpd/build/runa-gpd-dev-linux.gtk.x86.zip
elif [ "%{_arch}" = "pentium3" ]; then
    unzip gpd/build/runa-gpd-dev-linux.gtk.x86.zip
elif [ "%{_arch}" = "pentium4" ]; then
    unzip gpd/build/runa-gpd-dev-linux.gtk.x86.zip
elif [ "%{_arch}" = "athlon" ]; then
    unzip gpd/build/runa-gpd-dev-linux.gtk.x86.zip
elif [ "%{_arch}" = "athlon_xp" ]; then
    unzip gpd/build/runa-gpd-dev-linux.gtk.x86.zip
elif [ "%{_arch}" = "k6" ]; then
    unzip gpd/build/runa-gpd-dev-linux.gtk.x86.zip
else 
    unzip gpd/build/runa-gpd-dev-linux.gtk.x86_64.zip
fi

mkdir -p %buildroot%{_libdir}/RunaGPD
cd gpd-dev
mv workspace workspace_demo
rm -Rf workspace
cp -Rf * %buildroot%{_libdir}/RunaGPD/
mkdir -p %buildroot/usr/share/pixmaps
mv ../wfe/resources/distr-build/icons/e_20x20_256.gif %buildroot/usr/share/pixmaps/RunaWFE-GPD.gif

#Product Runtime Configuration File

# Delete configuration file and create them as we need
rm -Rf %buildroot%{_libdir}/RunaGPD/configuration
mkdir -p %buildroot%{_libdir}/RunaGPD/configuration
cat <<EOF >%buildroot%{_libdir}/RunaGPD/configuration/config.ini
osgi.splashPath=platform:/base/plugins/ru.runa.jbpm.ui
eclipse.product=ru.runa.bpm.ui.RUNA
osgi.bundles=org.eclipse.equinox.common@2:start,org.eclipse.update.configurator@3:start,org.eclipse.core.runtime@start
osgi.bundles.defaultStartLevel=4
osgi.instance.area=@user.home/RunaGPD-processes
org.eclipse.swt.browser.UseWebKitGTK=true
EOF

cat <<EOF >%buildroot%{_libdir}/RunaGPD/runa-gpd.ini
-vmargs
-Xms128m
-Xmx1024m
-Dorg.eclipse.swt.browser.UseWebKitGTK=true
EOF
chmod 644 %buildroot%{_libdir}/RunaGPD/runa-gpd.ini

# No one changing default configuration
find plugins/* workspace_demo/* configuration/* -type d -print0 | xargs -0 chmod 755
find plugins/* workspace_demo/* configuration/* -type f -print0 | xargs -0 chmod 644
chmod 755 configuration plugins workspace_demo

cd ..
