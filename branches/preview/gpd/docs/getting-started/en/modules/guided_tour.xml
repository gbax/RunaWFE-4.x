<chapter id="firstprocess">
    <title>A Guided Tour of JBoss jBPM GPD</title>
    <section>
        <title>Creating a jBPM Project </title>
        <para> We have included a wizard in the GPD plugin to create a jBPM project. We have 
            opted to create a project containing based on a template already containing a 
            number of advanced artifacts that we will ignore for this section. In the future
            we will elaborate this wizard and offer the possibility to create an empty jBPM
            project as well as projects based on templates taken from the jBPM tutorial.</para>
        <para> The jBPM projects in Eclipse are in fact Java projects with a number of 
            additional settings, so we switch to the Eclipse Java perspective. To create a new
            jBPM project using the project creation wizard, we select 'New->Project...' and in
            the New Project dialog, we select 'JBoss jBPM -> Process Project' 
            (<xref linkend="new_project" />). Clicking 'Next' brings us to the wizard page 
            where we have to specify the name and location for the project. We choose for
            example 'Hello jBPM' as the name and accept the default location
            (<xref linkend="new_process_project" />). </para>
        <figure id="new_project">
            <title>New Project Dialog </title>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="images/guided_tour/new_project.jpg"/>
                </imageobject>
            </mediaobject>
        </figure>
        <figure id="new_process_project">
            <title>Process Name and Location </title>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="images/guided_tour/new_process_project.jpg"/>
                </imageobject>
            </mediaobject>
         </figure>
         <para> Clicking on Finish results in the project being created. The wizard creates four
         	 source folders : one for the processes ('src/process'), one for the java sources
         	 ('src/java'), one for the unit tests ('test/java') and one for the resources such as
         	 the jbpm.properties and the hibernate.properties files ('src/resources'). In addition
         	 a classpath container with all the core jBPM libraries is added to the project 
         	 (<xref linkend="project_layout" />
        	</para>
         <figure id="project_layout">
            <title>Layout of the Process Project </title>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="images/guided_tour/project_layout.jpg"/>
                </imageobject>
            </mediaobject>
         </figure>
         <para> Looking inside the different source folders will reveal a number of other artifacts
            that were generated, but we will leave these untouched for the moment. Instead, we will 
            look at another wizard that enables us to create an empty process definition.</para>
      </section>
       <section>
      	<title>Creating an Empty Process Definition</title>
        <para> When the project is set up, we can use a creation wizard to create an empty
        	process definition. Bring up the 'New' wizard by clicking the 'File->New->Other...'
        	menu item. The wizard opens on the 'Select Wizard' page 
        	(<xref linkend="select_wizard" />).</para>
        <figure id="select_wizard">
            <title>The Select Wizard Page </title>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="images/guided_tour/select_wizard.jpg"/>
                </imageobject>
            </mediaobject>
        </figure>
        <figure id="new_process_definition">
            <title>The Create New Process Definion Page </title>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="images/guided_tour/new_process_definition.jpg"/>
                </imageobject>
            </mediaobject>
        </figure>
        <para> Selecting the 'JBoss jBPM' category, then the 'Process Definition' item and clicking 
        	on the 'Next' button brings us to the 'Create Process Definition'
        	page (<xref linkend="new_process_definition" />). We choose 'hello' as the name of the 
        	process archive file. Click on the 'Finish' button to end the wizard and open the process 
        	definition editor (<xref linkend="process_definition_created" />). As you can see in the 
        	package explorer, creating a process definition involves creating a folder with the name
        	of the process definition and a '.par' extension and populating this folder with two .xml
        	files : gpd.xml and processdefinition.xml. The first of these two contains the graphical 
        	information used by the process definition editor. Though you can view the contents with 
        	an ordinary xml editor, the default editor opening this file will be the process definition
        	editor. The processdefinition.xml file contains the actual process definition info without
        	the graphical rendering info. At present, the GPD assumes that these two files are siblings.
        	More sophisticated configuration will be supported later.</para>
        <figure id="process_definition_created">
            <title>The Process Definition Editor </title>
            <mediaobject>
                <imageobject>
                    <imagedata align="center" fileref="images/guided_tour/process_definition_created.jpg"/>
                </imageobject>
            </mediaobject>
        </figure>
    </section>
    <section>
    	<title>A Minimal Process Definition</title>
    	<para> We will create a very simple process definition, consisting of a begin state, an
    		intermediate state and an end state. </para>
    	<section>
    		<title>Adding the Nodes</title>
    		<para>Select respectively 'Start', 'State' and 'End' on 
    			the tools palette and click on the canvas to add these nodes to the process definition.
    			The result should look similar to <xref linkend="simple_process_with_nodes" /> </para>
         	<figure id="simple_process_with_nodes">
            	<title>A Simple Process With Three Nodes </title>
            	<mediaobject>
               		<imageobject>
                    	<imagedata align="center" fileref="images/guided_tour/simple_process_with_nodes.jpg"/>
                	</imageobject>
            	</mediaobject>
        	</figure>
        </section>
    	<section>
    		<title>Adding Transitions</title>
    		<para>We will connect the nodes with transitions. Select the 'Transition' tool in the tools
    			palette and click on the 'Start' node, then move to the 'State' node and click again to
    			see the transition being drawn. Perform the same steps to create a transition from the
    			'State' node to the 'End' node. The result looks like <xref linkend="simple_process_with_transitions" />. 
    			</para>
         	<figure id="simple_process_with_transitions">
            	<title>A Simple Process With Transitions </title>
            	<mediaobject>
               		<imageobject>
                    	<imagedata align="center" fileref="images/guided_tour/simple_process_with_transitions.jpg"/>
                	</imageobject>
            	</mediaobject>
        	</figure>
        </section>
    </section>
    <section>
    	<title>The Outline View</title>
    	<para>You can see an outline of the process being drawn in the Eclipse outline view if it is visible.
    		The process outline comes in two different flavours. One of them is the classical treeview. You can
    		see the expanded tree outline view of our minimal process in <xref linkend="simple_process_with_transitions" />.
    		The other possibility is to view the outline as a scrollable thumbnail. This possibility is
    		illustrated in <xref linkend="outline_thumbnail"/>. Because the process definition is still fairly 
    		simple with as little as three nodes, this thumbnail is at the moment bigger than the actual graph, 
    		but for complex graphs this feature is particularly interesting.</para>
     	<figure id="outline_thumbnail">
        	<title>The Outline as Thumbnail </title>
        	<mediaobject>
           		<imageobject>
                	<imagedata align="center" fileref="images/guided_tour/outline_thumbnail.jpg"/>
            	</imageobject>
        	</mediaobject>
    	</figure>
    	<para>You are able to toggle between these two outline views using the outline toolbar buttons.</para>
    </section>
    <section>
    	<title>The Properties View</title>
    	<para>If the Eclipse Properties view is visible, the relevant properties of the selected item 
    		are shown. Some of these properties may be directly editable in the properties view. An 
    		example of a directly editable property is the name property of the process definition. As you can see in 
    		<xref linkend="properties_process_definition" />, the name property of the process definition
    		can be changed to 'jbay'.</para>
     	<figure id="properties_process_definition">
        	<title>The Properties of a Process Definition </title>
        	<mediaobject>
           		<imageobject>
                	<imagedata align="center" fileref="images/guided_tour/properties_process_definition.jpg"/>
            	</imageobject>
        	</mediaobject>
    	</figure>
    	<para>When we select the first transition, either by clicking on it on the canvas or by clicking
    		on its node in the tree outline view, we see the properties of this transition in the properties
    		view (<xref linkend="properties_first_transition" />). We are able to edit the name of the transition,
    		but the 'Source' and 'Target' properties are read-only. We change the name of the first transition to
    		'to_auction'. We repeat this name change for the second transition and name it 'to_end'.</para>
     	<figure id="properties_first_transition">
        	<title>The Properties of a Transition </title>
        	<mediaobject>
           		<imageobject>
                	<imagedata align="center" fileref="images/guided_tour/properties_first_transition.jpg"/>
            	</imageobject>
        	</mediaobject>
    	</figure>
    </section>
    <section>
    	<title>Direct Editing</title>
    	<para> Some properties can be directly edited in the graphical editor. One example of this is the 
    		'Name' property of nodes. You can edit this directly by selecting the node of wich you want to change
    		the name and then click once inside this node. This enables an editor in the node as shown in 
    		<xref linkend="properties_direct_edit" />. We change the name of the node to 'auction'.</para>
     	<figure id="properties_direct_edit">
        	<title>Directly Editing the Node Name </title>
        	<mediaobject>
           		<imageobject>
                	<imagedata align="center" fileref="images/guided_tour/properties_direct_edit.jpg"/>
            	</imageobject>
        	</mediaobject>
    	</figure>
    </section>
    <section>
    	<title>The Source View</title>
    	<para> Now that we have defined a simple process definition, we can have a look at the xml that is being
    		generated under the covers. To see this xml, click on the source tab of the process definition editor.
    		(<xref linkend="process_definition_source" />).</para>
     	<figure id="process_definition_source">
        	<title>The Source View </title>
        	<mediaobject>
           		<imageobject>
                	<imagedata align="center" fileref="images/guided_tour/process_definition_source.jpg"/>
            	</imageobject>
        	</mediaobject>
    	</figure>
    	<para> This source tab is editable, so if you know your way around in jpdl, you can create or tweak your
    		process definitions directly in the xml source. But if you want to do this, note that at this moment
    		the layout of the drawing may get messy. Intelligent layout algorithms will probably be added in a later
    		stage. Also, the validity of the xml is not yet enforced. This is on the todo list and will be added in 
    		the near future.</para>
    </section>
</chapter>
