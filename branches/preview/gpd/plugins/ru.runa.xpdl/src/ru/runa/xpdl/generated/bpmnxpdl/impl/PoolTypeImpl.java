//
// This file was ru.runa.xpdl.generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.05.23 at 09:51:37 PM MSD 
//


package ru.runa.xpdl.generated.bpmnxpdl.impl;

public class PoolTypeImpl implements ru.runa.xpdl.generated.bpmnxpdl.PoolType, com.sun.xml.bind.JAXBObject, ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallableObject, ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.XMLSerializable, ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.ValidatableObject
{

    protected java.lang.String _Name;
    protected com.sun.xml.bind.util.ListImpl _Any;
    protected ru.runa.xpdl.generated.bpmnxpdl.LanesType _Lanes;
    protected java.lang.String _Orientation;
    protected boolean has_BoundaryVisible;
    protected boolean _BoundaryVisible;
    protected java.lang.String _Process;
    protected java.lang.String _Participant;
    protected java.lang.String _Id;
    protected boolean has_MainPool;
    protected boolean _MainPool;
    protected ru.runa.xpdl.generated.bpmnxpdl.ObjectType _Object;
    protected ru.runa.xpdl.generated.bpmnxpdl.NodeGraphicsInfosType _NodeGraphicsInfos;
    public final static java.lang.Class version = (ru.runa.xpdl.generated.bpmnxpdl.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (ru.runa.xpdl.generated.bpmnxpdl.PoolType.class);
    }

    public java.lang.String getName() {
        return _Name;
    }

    public void setName(java.lang.String value) {
        _Name = value;
    }

    protected com.sun.xml.bind.util.ListImpl _getAny() {
        if (_Any == null) {
            _Any = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Any;
    }

    public java.util.List getAny() {
        return _getAny();
    }

    public ru.runa.xpdl.generated.bpmnxpdl.LanesType getLanes() {
        return _Lanes;
    }

    public void setLanes(ru.runa.xpdl.generated.bpmnxpdl.LanesType value) {
        _Lanes = value;
    }

    public java.lang.String getOrientation() {
        if (_Orientation == null) {
            return "HORIZONTAL";
        } else {
            return _Orientation;
        }
    }

    public void setOrientation(java.lang.String value) {
        _Orientation = value;
    }

    public boolean isBoundaryVisible() {
        return _BoundaryVisible;
    }

    public void setBoundaryVisible(boolean value) {
        _BoundaryVisible = value;
        has_BoundaryVisible = true;
    }

    public java.lang.String getProcess() {
        return _Process;
    }

    public void setProcess(java.lang.String value) {
        _Process = value;
    }

    public java.lang.String getParticipant() {
        return _Participant;
    }

    public void setParticipant(java.lang.String value) {
        _Participant = value;
    }

    public java.lang.String getId() {
        return _Id;
    }

    public void setId(java.lang.String value) {
        _Id = value;
    }

    public boolean isMainPool() {
        if (!has_MainPool) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("false"));
        } else {
            return _MainPool;
        }
    }

    public void setMainPool(boolean value) {
        _MainPool = value;
        has_MainPool = true;
    }

    public ru.runa.xpdl.generated.bpmnxpdl.ObjectType getObject() {
        return _Object;
    }

    public void setObject(ru.runa.xpdl.generated.bpmnxpdl.ObjectType value) {
        _Object = value;
    }

    public ru.runa.xpdl.generated.bpmnxpdl.NodeGraphicsInfosType getNodeGraphicsInfos() {
        return _NodeGraphicsInfos;
    }

    public void setNodeGraphicsInfos(ru.runa.xpdl.generated.bpmnxpdl.NodeGraphicsInfosType value) {
        _NodeGraphicsInfos = value;
    }

    public ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallingEventHandler createUnmarshaller(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallingContext context) {
        return new ru.runa.xpdl.generated.bpmnxpdl.impl.PoolTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = ((_Any == null)? 0 :_Any.size());
        if (!has_BoundaryVisible) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "BoundaryVisible"));
        }
        if (_NodeGraphicsInfos!= null) {
            if (_NodeGraphicsInfos instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _NodeGraphicsInfos), "NodeGraphicsInfos");
            } else {
                context.startElement("http://www.wfmc.org/2008/XPDL2.1", "NodeGraphicsInfos");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _NodeGraphicsInfos), "NodeGraphicsInfos");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _NodeGraphicsInfos), "NodeGraphicsInfos");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _NodeGraphicsInfos), "NodeGraphicsInfos");
                context.endElement();
            }
        }
        if (_Lanes!= null) {
            if (_Lanes instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Lanes), "Lanes");
            } else {
                context.startElement("http://www.wfmc.org/2008/XPDL2.1", "Lanes");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Lanes), "Lanes");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Lanes), "Lanes");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Lanes), "Lanes");
                context.endElement();
            }
        }
        if (_Object!= null) {
            if (_Object instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Object), "Object");
            } else {
                context.startElement("http://www.wfmc.org/2008/XPDL2.1", "Object");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Object), "Object");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Object), "Object");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Object), "Object");
                context.endElement();
            }
        }
        while (idx2 != len2) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Any.get(idx2 ++)), "Any");
        }
    }

    public void serializeAttributes(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = ((_Any == null)? 0 :_Any.size());
        if (!has_BoundaryVisible) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "BoundaryVisible"));
        }
        context.startAttribute("", "BoundaryVisible");
        try {
            context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _BoundaryVisible)), "BoundaryVisible");
        } catch (java.lang.Exception e) {
            ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "Id");
        try {
            context.text(((java.lang.String) _Id), "Id");
        } catch (java.lang.Exception e) {
            ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        if (has_MainPool) {
            context.startAttribute("", "MainPool");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _MainPool)), "MainPool");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Name!= null) {
            context.startAttribute("", "Name");
            try {
                context.text(((java.lang.String) _Name), "Name");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Orientation!= null) {
            context.startAttribute("", "Orientation");
            try {
                context.text(((java.lang.String) _Orientation), "Orientation");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Participant!= null) {
            context.startAttribute("", "Participant");
            try {
                context.text(((java.lang.String) _Participant), "Participant");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Process!= null) {
            context.startAttribute("", "Process");
            try {
                context.text(((java.lang.String) _Process), "Process");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_NodeGraphicsInfos!= null) {
            if (_NodeGraphicsInfos instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _NodeGraphicsInfos), "NodeGraphicsInfos");
            }
        }
        if (_Lanes!= null) {
            if (_Lanes instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Lanes), "Lanes");
            }
        }
        if (_Object!= null) {
            if (_Object instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Object), "Object");
            }
        }
        while (idx2 != len2) {
            idx2 += 1;
        }
    }

    public void serializeURIs(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = ((_Any == null)? 0 :_Any.size());
        if (!has_BoundaryVisible) {
            context.reportError(com.sun.xml.bind.serializer.Util.createMissingObjectError(this, "BoundaryVisible"));
        }
        if (_NodeGraphicsInfos!= null) {
            if (_NodeGraphicsInfos instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _NodeGraphicsInfos), "NodeGraphicsInfos");
            }
        }
        if (_Lanes!= null) {
            if (_Lanes instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Lanes), "Lanes");
            }
        }
        if (_Object!= null) {
            if (_Object instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Object), "Object");
            }
        }
        while (idx2 != len2) {
            idx2 += 1;
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (ru.runa.xpdl.generated.bpmnxpdl.PoolType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar.Choi"
+"ceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\u000fsr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002"
+"\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001eco"
+"m.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAt"
+"tributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0013p\u0000sq\u0000~\u0000\u000fppsr\u0000 com.sun"
+".msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar."
+"UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0013psr\u0000 com.sun.msv.gr"
+"ammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0015xq\u0000"
+"~\u0000\u0003q\u0000~\u0000\u0013psr\u00002com.sun.msv.grammar.Expression$AnyStringExpress"
+"ion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u0012\u0001q\u0000~\u0000\u001fsr\u0000 com.sun.msv.grammar.AnyN"
+"ameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000 q\u0000~\u0000%sr\u0000#com.sun.msv.grammar.SimpleNameCl"
+"ass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceU"
+"RIq\u0000~\u0000\'xq\u0000~\u0000\"t\u0000$ru.runa.xpdl.generated.bpmnxpdl.NodeGraphicsInfost\u0000+http:"
+"//java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0014q\u0000~\u0000\u0013p\u0000sq\u0000~\u0000\u0000pps"
+"q\u0000~\u0000\u0014pp\u0000sq\u0000~\u0000\u000fppsq\u0000~\u0000\u0019q\u0000~\u0000\u0013psq\u0000~\u0000\u001cq\u0000~\u0000\u0013pq\u0000~\u0000\u001fq\u0000~\u0000#q\u0000~\u0000%sq\u0000~\u0000"
+"&t\u0000(ru.runa.xpdl.generated.bpmnxpdl.NodeGraphicsInfosTypeq\u0000~\u0000*sq\u0000~\u0000\u000fppsq\u0000"
+"~\u0000\u001cq\u0000~\u0000\u0013psr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fL"
+"org/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/s"
+"un/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype.xsd."
+"QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtom"
+"icType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000\'L\u0000\btypeNameq\u0000~\u0000\'L\u0000\nwhiteSpacet\u0000.Lcom/"
+"sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3."
+"org/2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd.White"
+"SpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.x"
+"sd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.E"
+"xpression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u0013psr\u0000\u001bcom.su"
+"n.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\'L\u0000\fnamespac"
+"eURIq\u0000~\u0000\'xpq\u0000~\u0000@q\u0000~\u0000?sq\u0000~\u0000&t\u0000\u0004typet\u0000)http://www.w3.org/2001/"
+"XMLSchema-instanceq\u0000~\u0000%sq\u0000~\u0000&t\u0000\u0011NodeGraphicsInfost\u0000 http://w"
+"ww.wfmc.org/2008/XPDL2.1q\u0000~\u0000%sq\u0000~\u0000\u000fppsq\u0000~\u0000\u000fq\u0000~\u0000\u0013psq\u0000~\u0000\u0014q\u0000~\u0000\u0013"
+"p\u0000sq\u0000~\u0000\u000fppsq\u0000~\u0000\u0019q\u0000~\u0000\u0013psq\u0000~\u0000\u001cq\u0000~\u0000\u0013pq\u0000~\u0000\u001fq\u0000~\u0000#q\u0000~\u0000%sq\u0000~\u0000&t\u0000\u0018ge"
+"nerated.bpmnxpdl.Lanesq\u0000~\u0000*sq\u0000~\u0000\u0014q\u0000~\u0000\u0013p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0014pp\u0000sq\u0000"
+"~\u0000\u000fppsq\u0000~\u0000\u0019q\u0000~\u0000\u0013psq\u0000~\u0000\u001cq\u0000~\u0000\u0013pq\u0000~\u0000\u001fq\u0000~\u0000#q\u0000~\u0000%sq\u0000~\u0000&t\u0000\u001cgenerat"
+"ed.bpmnxpdl.LanesTypeq\u0000~\u0000*sq\u0000~\u0000\u000fppsq\u0000~\u0000\u001cq\u0000~\u0000\u0013pq\u0000~\u00008q\u0000~\u0000Hq\u0000~\u0000"
+"%sq\u0000~\u0000&t\u0000\u0005Lanesq\u0000~\u0000Mq\u0000~\u0000%sq\u0000~\u0000\u000fppsq\u0000~\u0000\u000fq\u0000~\u0000\u0013psq\u0000~\u0000\u0014q\u0000~\u0000\u0013p\u0000sq"
+"\u0000~\u0000\u000fppsq\u0000~\u0000\u0019q\u0000~\u0000\u0013psq\u0000~\u0000\u001cq\u0000~\u0000\u0013pq\u0000~\u0000\u001fq\u0000~\u0000#q\u0000~\u0000%sq\u0000~\u0000&t\u0000\u0019genera"
+"ted.bpmnxpdl.Objectq\u0000~\u0000*sq\u0000~\u0000\u0014q\u0000~\u0000\u0013p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0014pp\u0000sq\u0000~\u0000\u000f"
+"ppsq\u0000~\u0000\u0019q\u0000~\u0000\u0013psq\u0000~\u0000\u001cq\u0000~\u0000\u0013pq\u0000~\u0000\u001fq\u0000~\u0000#q\u0000~\u0000%sq\u0000~\u0000&t\u0000\u001dgenerated."
+"bpmnxpdl.ObjectTypeq\u0000~\u0000*sq\u0000~\u0000\u000fppsq\u0000~\u0000\u001cq\u0000~\u0000\u0013pq\u0000~\u00008q\u0000~\u0000Hq\u0000~\u0000%s"
+"q\u0000~\u0000&t\u0000\u0006Objectq\u0000~\u0000Mq\u0000~\u0000%sq\u0000~\u0000\u000fppsq\u0000~\u0000\u0019q\u0000~\u0000\u0013psq\u0000~\u0000\u0014q\u0000~\u0000\u0013p\u0000sq\u0000"
+"~\u0000\u001cppq\u0000~\u0000\u001fsr\u0000\'com.sun.msv.grammar.DifferenceNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0002L\u0000\u0003nc1q\u0000~\u0000\u0015L\u0000\u0003nc2q\u0000~\u0000\u0015xq\u0000~\u0000\"q\u0000~\u0000#sr\u0000#com.sun.msv.grammar"
+".ChoiceNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003nc1q\u0000~\u0000\u0015L\u0000\u0003nc2q\u0000~\u0000\u0015xq\u0000~\u0000\"sr\u0000&c"
+"om.sun.msv.grammar.NamespaceNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\fnamespace"
+"URIq\u0000~\u0000\'xq\u0000~\u0000\"t\u0000\u0000sq\u0000~\u0000~q\u0000~\u0000Msq\u0000~\u0000~q\u0000~\u0000*q\u0000~\u0000%sq\u0000~\u0000\u001cppsq\u0000~\u00005pp"
+"sr\u0000$com.sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000:q\u0000~"
+"\u0000?t\u0000\u0007booleanq\u0000~\u0000Cq\u0000~\u0000Esq\u0000~\u0000Fq\u0000~\u0000\u0087q\u0000~\u0000?sq\u0000~\u0000&t\u0000\u000fBoundaryVisib"
+"leq\u0000~\u0000\u0080sq\u0000~\u0000\u001cppsq\u0000~\u00005ppsr\u0000\'com.sun.msv.datatype.xsd.FinalCom"
+"ponent\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\nfinalValuexr\u0000\u001ecom.sun.msv.datatype.xsd.P"
+"roxy\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDat"
+"atypeImpl;xq\u0000~\u0000<q\u0000~\u0000Mt\u0000\u0002Idq\u0000~\u0000Csr\u0000$com.sun.msv.datatype.xsd."
+"NmtokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\"com.sun.msv.datatype.xsd.TokenType"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0001Z\u0000\risAlwaysValidxq\u0000~\u0000:q\u0000~\u0000?t\u0000\u0007NMTOKENq\u0000~\u0000C\u0000\u0000\u0000\u0000\u0000q\u0000~\u0000Esq\u0000~\u0000Fq"
+"\u0000~\u0000\u0096q\u0000~\u0000Msq\u0000~\u0000&t\u0000\u0002Idq\u0000~\u0000\u0080sq\u0000~\u0000\u000fppsq\u0000~\u0000\u001cq\u0000~\u0000\u0013pq\u0000~\u0000\u0084sq\u0000~\u0000&t\u0000\bM"
+"ainPoolq\u0000~\u0000\u0080q\u0000~\u0000%sq\u0000~\u0000\u000fppsq\u0000~\u0000\u001cq\u0000~\u0000\u0013psq\u0000~\u00005q\u0000~\u0000\u0013psq\u0000~\u0000\u0094q\u0000~\u0000?"
+"t\u0000\u0006stringsr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Pr"
+"eserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000B\u0001q\u0000~\u0000Esq\u0000~\u0000Fq\u0000~\u0000\u00a2q\u0000~\u0000?sq\u0000~\u0000&t\u0000\u0004Nameq\u0000"
+"~\u0000\u0080q\u0000~\u0000%sq\u0000~\u0000\u000fppsq\u0000~\u0000\u001cq\u0000~\u0000\u0013psq\u0000~\u00005ppsr\u0000)com.sun.msv.datatype"
+".xsd.EnumerationFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0006valuest\u0000\u000fLjava/util/Set;x"
+"r\u00009com.sun.msv.datatype.xsd.DataTypeWithValueConstraintFacet"
+"\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithFacet\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTypeq\u0000~\u0000\u008f"
+"L\u0000\fconcreteTypet\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\t"
+"facetNameq\u0000~\u0000\'xq\u0000~\u0000<q\u0000~\u0000Mpq\u0000~\u0000C\u0000\u0000q\u0000~\u0000\u0095q\u0000~\u0000\u0095t\u0000\u000benumerationsr\u0000"
+"\u0011java.util.HashSet\u00baD\u0085\u0095\u0096\u00b8\u00b74\u0003\u0000\u0000xpw\f\u0000\u0000\u0000\u0010?@\u0000\u0000\u0000\u0000\u0000\u0002t\u0000\nHORIZONTALt\u0000"
+"\bVERTICALxq\u0000~\u0000Esq\u0000~\u0000Ft\u0000\u000fNMTOKEN-derivedq\u0000~\u0000Msq\u0000~\u0000&t\u0000\u000bOrienta"
+"tionq\u0000~\u0000\u0080q\u0000~\u0000%sq\u0000~\u0000\u000fppsq\u0000~\u0000\u001cq\u0000~\u0000\u0013psq\u0000~\u00005ppq\u0000~\u0000\u0095q\u0000~\u0000Esq\u0000~\u0000Fq\u0000"
+"~\u0000\u0096q\u0000~\u0000?sq\u0000~\u0000&t\u0000\u000bParticipantq\u0000~\u0000\u0080q\u0000~\u0000%sq\u0000~\u0000\u000fppsq\u0000~\u0000\u001cq\u0000~\u0000\u0013psq"
+"\u0000~\u00005ppsq\u0000~\u0000\u008dq\u0000~\u0000Mt\u0000\u0005IdRefq\u0000~\u0000Cq\u0000~\u0000\u0095\u0000\u0000\u0000\u0000q\u0000~\u0000Esq\u0000~\u0000Fq\u0000~\u0000\u0096q\u0000~\u0000M"
+"sq\u0000~\u0000&t\u0000\u0007Processq\u0000~\u0000\u0080q\u0000~\u0000%sr\u0000\"com.sun.msv.grammar.Expression"
+"Pool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/Expression"
+"Pool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$Clo"
+"sedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/s"
+"un/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000)\u0001pq\u0000~\u0000\u001bq\u0000~\u0000/q\u0000~\u0000Rq\u0000~\u0000Zq\u0000"
+"~\u0000fq\u0000~\u0000nq\u0000~\u0000\u0018q\u0000~\u0000.q\u0000~\u0000Qq\u0000~\u0000Yq\u0000~\u0000eq\u0000~\u0000mq\u0000~\u0000\fq\u0000~\u0000\u009eq\u0000~\u0000,q\u0000~\u0000Wq\u0000"
+"~\u0000kq\u0000~\u0000\u009aq\u0000~\u0000\u00a8q\u0000~\u0000\u00c0q\u0000~\u0000\u0006q\u0000~\u0000\rq\u0000~\u0000\u000bq\u0000~\u0000\nq\u0000~\u0000\u00baq\u0000~\u0000\u000eq\u0000~\u0000vq\u0000~\u0000\u0005q\u0000"
+"~\u00003q\u0000~\u0000^q\u0000~\u0000rq\u0000~\u0000wq\u0000~\u0000\u0010q\u0000~\u0000\u0011q\u0000~\u0000Oq\u0000~\u0000Nq\u0000~\u0000cq\u0000~\u0000bq\u0000~\u0000\tq\u0000~\u0000\u0007q\u0000"
+"~\u0000\bx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallingContext context) {
            super(context, "--------------------------------");
        }

        protected Unmarshaller(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return ru.runa.xpdl.generated.bpmnxpdl.impl.PoolTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        attIdx = context.getAttribute("", "Participant");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText1(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  27 :
                        if (("Object" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            _Object = ((ru.runa.xpdl.generated.bpmnxpdl.impl.ObjectImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.ObjectImpl.class), 28, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Object" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 30;
                            return ;
                        }
                        state = 28;
                        continue outer;
                    case  30 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "BoundaryVisible");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        break;
                    case  28 :
                        if (!(("" == ___uri)||("http://www.wfmc.org/2008/XPDL2.1" == ___uri))) {
                            java.lang.Object co = spawnWildcard(29, ___uri, ___local, ___qname, __atts);
                            if (co!= null) {
                                _getAny().add(co);
                            }
                            return ;
                        }
                        state = 29;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case  24 :
                        if (("Lanes" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            _Lanes = ((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesImpl.class), 27, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Lanes" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 25;
                            return ;
                        }
                        state = 27;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "Orientation");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText4(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  21 :
                        if (("NodeGraphicsInfos" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            _NodeGraphicsInfos = ((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosImpl.class), 24, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("NodeGraphicsInfos" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 22;
                            return ;
                        }
                        state = 24;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "Name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText5(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "MainPool");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText6(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  29 :
                        if (!(("" == ___uri)||("http://www.wfmc.org/2008/XPDL2.1" == ___uri))) {
                            java.lang.Object co = spawnWildcard(29, ___uri, ___local, ___qname, __atts);
                            if (co!= null) {
                                _getAny().add(co);
                            }
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  18 :
                        attIdx = context.getAttribute("", "Process");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText7(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  25 :
                        if (("Lane" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            _Lanes = ((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl.class), 26, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Lane" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            _Lanes = ((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl.class), 26, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (!(("" == ___uri)||("http://www.wfmc.org/2008/XPDL2.1" == ___uri))) {
                            _Lanes = ((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl.class), 26, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Lanes = ((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl.class), 26, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  22 :
                        if (("NodeGraphicsInfo" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            _NodeGraphicsInfos = ((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl.class), 23, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("NodeGraphicsInfo" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            _NodeGraphicsInfos = ((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl.class), 23, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (!(("" == ___uri)||("http://www.wfmc.org/2008/XPDL2.1" == ___uri))) {
                            _NodeGraphicsInfos = ((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl.class), 23, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _NodeGraphicsInfos = ((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl.class), 23, ___uri, ___local, ___qname, __atts));
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Participant = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _BoundaryVisible = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_BoundaryVisible = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Id = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Orientation = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Name = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _MainPool = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_MainPool = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Process = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        attIdx = context.getAttribute("", "Participant");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText1(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  27 :
                        state = 28;
                        continue outer;
                    case  30 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "BoundaryVisible");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        break;
                    case  28 :
                        state = 29;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  26 :
                        if (("Lanes" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            context.popAttributes();
                            state = 27;
                            return ;
                        }
                        break;
                    case  12 :
                        attIdx = context.getAttribute("", "Orientation");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText4(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  23 :
                        if (("NodeGraphicsInfos" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            context.popAttributes();
                            state = 24;
                            return ;
                        }
                        break;
                    case  31 :
                        if (("Object" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            context.popAttributes();
                            state = 28;
                            return ;
                        }
                        break;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "Name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText5(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  6 :
                        attIdx = context.getAttribute("", "MainPool");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText6(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  29 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  18 :
                        attIdx = context.getAttribute("", "Process");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText7(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  25 :
                        _Lanes = ((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl) spawnChildFromLeaveElement((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl.class), 26, ___uri, ___local, ___qname));
                        return ;
                    case  22 :
                        _NodeGraphicsInfos = ((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl) spawnChildFromLeaveElement((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl.class), 23, ___uri, ___local, ___qname));
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  15 :
                        if (("Participant" == ___local)&&("" == ___uri)) {
                            state = 16;
                            return ;
                        }
                        state = 18;
                        continue outer;
                    case  27 :
                        state = 28;
                        continue outer;
                    case  30 :
                        if (("Id" == ___local)&&("" == ___uri)) {
                            _Object = ((ru.runa.xpdl.generated.bpmnxpdl.impl.ObjectTypeImpl) spawnChildFromEnterAttribute((ru.runa.xpdl.generated.bpmnxpdl.impl.ObjectTypeImpl.class), 31, ___uri, ___local, ___qname));
                            return ;
                        }
                        break;
                    case  0 :
                        if (("BoundaryVisible" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        break;
                    case  28 :
                        state = 29;
                        continue outer;
                    case  3 :
                        if (("Id" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        break;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  12 :
                        if (("Orientation" == ___local)&&("" == ___uri)) {
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  9 :
                        if (("Name" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  6 :
                        if (("MainPool" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  29 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  18 :
                        if (("Process" == ___local)&&("" == ___uri)) {
                            state = 19;
                            return ;
                        }
                        state = 21;
                        continue outer;
                    case  25 :
                        _Lanes = ((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl) spawnChildFromEnterAttribute((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl.class), 26, ___uri, ___local, ___qname));
                        return ;
                    case  22 :
                        _NodeGraphicsInfos = ((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl) spawnChildFromEnterAttribute((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl.class), 23, ___uri, ___local, ___qname));
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  20 :
                        if (("Process" == ___local)&&("" == ___uri)) {
                            state = 21;
                            return ;
                        }
                        break;
                    case  15 :
                        attIdx = context.getAttribute("", "Participant");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText1(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  27 :
                        state = 28;
                        continue outer;
                    case  30 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "BoundaryVisible");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        break;
                    case  14 :
                        if (("Orientation" == ___local)&&("" == ___uri)) {
                            state = 15;
                            return ;
                        }
                        break;
                    case  28 :
                        state = 29;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "Id");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case  24 :
                        state = 27;
                        continue outer;
                    case  11 :
                        if (("Name" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                    case  12 :
                        attIdx = context.getAttribute("", "Orientation");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText4(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  21 :
                        state = 24;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "Name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText5(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  17 :
                        if (("Participant" == ___local)&&("" == ___uri)) {
                            state = 18;
                            return ;
                        }
                        break;
                    case  6 :
                        attIdx = context.getAttribute("", "MainPool");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText6(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  29 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  18 :
                        attIdx = context.getAttribute("", "Process");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText7(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  8 :
                        if (("MainPool" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  25 :
                        _Lanes = ((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl) spawnChildFromLeaveAttribute((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl.class), 26, ___uri, ___local, ___qname));
                        return ;
                    case  5 :
                        if (("Id" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  22 :
                        _NodeGraphicsInfos = ((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl) spawnChildFromLeaveAttribute((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl.class), 23, ___uri, ___local, ___qname));
                        return ;
                    case  2 :
                        if (("BoundaryVisible" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  15 :
                            attIdx = context.getAttribute("", "Participant");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 18;
                                eatText1(v);
                                continue outer;
                            }
                            state = 18;
                            continue outer;
                        case  27 :
                            state = 28;
                            continue outer;
                        case  30 :
                            attIdx = context.getAttribute("", "Id");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  0 :
                            attIdx = context.getAttribute("", "BoundaryVisible");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText2(v);
                                continue outer;
                            }
                            break;
                        case  16 :
                            state = 17;
                            eatText1(value);
                            return ;
                        case  28 :
                            state = 29;
                            continue outer;
                        case  3 :
                            attIdx = context.getAttribute("", "Id");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 6;
                                eatText3(v);
                                continue outer;
                            }
                            break;
                        case  13 :
                            state = 14;
                            eatText4(value);
                            return ;
                        case  24 :
                            state = 27;
                            continue outer;
                        case  10 :
                            state = 11;
                            eatText5(value);
                            return ;
                        case  12 :
                            attIdx = context.getAttribute("", "Orientation");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 15;
                                eatText4(v);
                                continue outer;
                            }
                            state = 15;
                            continue outer;
                        case  21 :
                            state = 24;
                            continue outer;
                        case  9 :
                            attIdx = context.getAttribute("", "Name");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 12;
                                eatText5(v);
                                continue outer;
                            }
                            state = 12;
                            continue outer;
                        case  6 :
                            attIdx = context.getAttribute("", "MainPool");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 9;
                                eatText6(v);
                                continue outer;
                            }
                            state = 9;
                            continue outer;
                        case  29 :
                            revertToParentFromText(value);
                            return ;
                        case  18 :
                            attIdx = context.getAttribute("", "Process");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 21;
                                eatText7(v);
                                continue outer;
                            }
                            state = 21;
                            continue outer;
                        case  1 :
                            state = 2;
                            eatText2(value);
                            return ;
                        case  7 :
                            state = 8;
                            eatText6(value);
                            return ;
                        case  4 :
                            state = 5;
                            eatText3(value);
                            return ;
                        case  25 :
                            _Lanes = ((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl) spawnChildFromText((ru.runa.xpdl.generated.bpmnxpdl.impl.LanesTypeImpl.class), 26, value));
                            return ;
                        case  22 :
                            _NodeGraphicsInfos = ((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl) spawnChildFromText((ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfosTypeImpl.class), 23, value));
                            return ;
                        case  19 :
                            state = 20;
                            eatText7(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
