//
// This file was ru.runa.xpdl.generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.05.04 at 12:24:30 PM MSD 
//


package ru.runa.xpdl.generated.jpdl32;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * ru.runa.xpdl.generated in the ru.runa.xpdl.generated.jpdl32 package.
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends ru.runa.xpdl.generated.jpdl32.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap(99, 0.75F);
    private static java.util.HashMap rootTagMap = new java.util.HashMap();
    public final static ru.runa.xpdl.generated.jpdl32.impl.runtime.GrammarInfo grammarInfo = new ru.runa.xpdl.generated.jpdl32.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations, (ru.runa.xpdl.generated.jpdl32.ObjectFactory.class));
    public final static java.lang.Class version = (ru.runa.xpdl.generated.jpdl32.impl.JAXBVersion.class);

    static {
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Swimlane.class), "ru.runa.xpdl.generated.jpdl32.impl.SwimlaneImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Subject.class), "ru.runa.xpdl.generated.jpdl32.impl.SubjectImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.ForkType.class), "ru.runa.xpdl.generated.jpdl32.impl.ForkTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.ProcessStateType.SubProcessType.class), "ru.runa.xpdl.generated.jpdl32.impl.ProcessStateTypeImpl.SubProcessTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.TransitionType.Condition.class), "ru.runa.xpdl.generated.jpdl32.impl.TransitionTypeImpl.ConditionImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.ProcessStateType.class), "ru.runa.xpdl.generated.jpdl32.impl.ProcessStateTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Transition.class), "ru.runa.xpdl.generated.jpdl32.impl.TransitionImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.MultiinstanceState.class), "ru.runa.xpdl.generated.jpdl32.impl.MultiinstanceStateImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.TaskNodeType.class), "ru.runa.xpdl.generated.jpdl32.impl.TaskNodeTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.TimerType.class), "ru.runa.xpdl.generated.jpdl32.impl.TimerTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Task.class), "ru.runa.xpdl.generated.jpdl32.impl.TaskImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Text.class), "ru.runa.xpdl.generated.jpdl32.impl.TextImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.MultiinstanceStateType.SubProcessType.class), "ru.runa.xpdl.generated.jpdl32.impl.MultiinstanceStateTypeImpl.SubProcessTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.TaskType.class), "ru.runa.xpdl.generated.jpdl32.impl.TaskTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.ExceptionHandler.class), "ru.runa.xpdl.generated.jpdl32.impl.ExceptionHandlerImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.SuperStateType.class), "ru.runa.xpdl.generated.jpdl32.impl.SuperStateTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.ProcessDefinition.class), "ru.runa.xpdl.generated.jpdl32.impl.ProcessDefinitionImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.VariableType.class), "ru.runa.xpdl.generated.jpdl32.impl.VariableTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.ProcessDefinitionType.class), "ru.runa.xpdl.generated.jpdl32.impl.ProcessDefinitionTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.State.class), "ru.runa.xpdl.generated.jpdl32.impl.StateImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.ProcessStateType.SubProcess.class), "ru.runa.xpdl.generated.jpdl32.impl.ProcessStateTypeImpl.SubProcessImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Mail.class), "ru.runa.xpdl.generated.jpdl32.impl.MailImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.ReceiveMessageType.class), "ru.runa.xpdl.generated.jpdl32.impl.ReceiveMessageTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.SwimlaneType.class), "ru.runa.xpdl.generated.jpdl32.impl.SwimlaneTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Recipients.class), "ru.runa.xpdl.generated.jpdl32.impl.RecipientsImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.EventType.class), "ru.runa.xpdl.generated.jpdl32.impl.EventTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Fork.class), "ru.runa.xpdl.generated.jpdl32.impl.ForkImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.MailNode.class), "ru.runa.xpdl.generated.jpdl32.impl.MailNodeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Script.class), "ru.runa.xpdl.generated.jpdl32.impl.ScriptImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.MailType.class), "ru.runa.xpdl.generated.jpdl32.impl.MailTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Action.class), "ru.runa.xpdl.generated.jpdl32.impl.ActionImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.MailNodeType.class), "ru.runa.xpdl.generated.jpdl32.impl.MailNodeTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.CreateTimer.class), "ru.runa.xpdl.generated.jpdl32.impl.CreateTimerImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Delegation.class), "ru.runa.xpdl.generated.jpdl32.impl.DelegationImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.StartState.class), "ru.runa.xpdl.generated.jpdl32.impl.StartStateImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.MultiinstanceStateType.SubProcess.class), "ru.runa.xpdl.generated.jpdl32.impl.MultiinstanceStateTypeImpl.SubProcessImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.TaskType.Reminder.class), "ru.runa.xpdl.generated.jpdl32.impl.TaskTypeImpl.ReminderImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.ActionType.class), "ru.runa.xpdl.generated.jpdl32.impl.ActionTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Node.class), "ru.runa.xpdl.generated.jpdl32.impl.NodeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.AssignmentType.class), "ru.runa.xpdl.generated.jpdl32.impl.AssignmentTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.SuperState.class), "ru.runa.xpdl.generated.jpdl32.impl.SuperStateImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.ProcessState.class), "ru.runa.xpdl.generated.jpdl32.impl.ProcessStateImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.TaskType.ReminderType.class), "ru.runa.xpdl.generated.jpdl32.impl.TaskTypeImpl.ReminderTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.JoinType.class), "ru.runa.xpdl.generated.jpdl32.impl.JoinTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.CancelTimerType.class), "ru.runa.xpdl.generated.jpdl32.impl.CancelTimerTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.StateType.class), "ru.runa.xpdl.generated.jpdl32.impl.StateTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Variable.class), "ru.runa.xpdl.generated.jpdl32.impl.VariableImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.EndStateType.class), "ru.runa.xpdl.generated.jpdl32.impl.EndStateTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.To.class), "ru.runa.xpdl.generated.jpdl32.impl.ToImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.ScriptType.class), "ru.runa.xpdl.generated.jpdl32.impl.ScriptTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.TransitionType.class), "ru.runa.xpdl.generated.jpdl32.impl.TransitionTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Timer.class), "ru.runa.xpdl.generated.jpdl32.impl.TimerImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.TransitionType.ConditionType.class), "ru.runa.xpdl.generated.jpdl32.impl.TransitionTypeImpl.ConditionTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.ExceptionHandlerType.class), "ru.runa.xpdl.generated.jpdl32.impl.ExceptionHandlerTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.CreateTimerType.class), "ru.runa.xpdl.generated.jpdl32.impl.CreateTimerTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Assignment.class), "ru.runa.xpdl.generated.jpdl32.impl.AssignmentImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.EndState.class), "ru.runa.xpdl.generated.jpdl32.impl.EndStateImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Template.class), "ru.runa.xpdl.generated.jpdl32.impl.TemplateImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.ReceiveMessage.class), "ru.runa.xpdl.generated.jpdl32.impl.ReceiveMessageImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.DecisionType.Handler.class), "ru.runa.xpdl.generated.jpdl32.impl.DecisionTypeImpl.HandlerImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.DecisionType.class), "ru.runa.xpdl.generated.jpdl32.impl.DecisionTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Decision.class), "ru.runa.xpdl.generated.jpdl32.impl.DecisionImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.MultiinstanceStateType.class), "ru.runa.xpdl.generated.jpdl32.impl.MultiinstanceStateTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.TaskNode.class), "ru.runa.xpdl.generated.jpdl32.impl.TaskNodeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Description.class), "ru.runa.xpdl.generated.jpdl32.impl.DescriptionImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Controller.class), "ru.runa.xpdl.generated.jpdl32.impl.ControllerImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.StartStateType.class), "ru.runa.xpdl.generated.jpdl32.impl.StartStateTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Join.class), "ru.runa.xpdl.generated.jpdl32.impl.JoinImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.NodeType.class), "ru.runa.xpdl.generated.jpdl32.impl.NodeTypeImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.SendMessage.class), "ru.runa.xpdl.generated.jpdl32.impl.SendMessageImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.Event.class), "ru.runa.xpdl.generated.jpdl32.impl.EventImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.CancelTimer.class), "ru.runa.xpdl.generated.jpdl32.impl.CancelTimerImpl");
        defaultImplementations.put((ru.runa.xpdl.generated.jpdl32.SendMessageType.class), "ru.runa.xpdl.generated.jpdl32.impl.SendMessageTypeImpl");
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "exception-handler"), (ru.runa.xpdl.generated.jpdl32.ExceptionHandler.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "action"), (ru.runa.xpdl.generated.jpdl32.Action.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "receive-message"), (ru.runa.xpdl.generated.jpdl32.ReceiveMessage.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "event"), (ru.runa.xpdl.generated.jpdl32.Event.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "timer"), (ru.runa.xpdl.generated.jpdl32.Timer.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "description"), (ru.runa.xpdl.generated.jpdl32.Description.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "state"), (ru.runa.xpdl.generated.jpdl32.State.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "decision"), (ru.runa.xpdl.generated.jpdl32.Decision.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "multiinstance-state"), (ru.runa.xpdl.generated.jpdl32.MultiinstanceState.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "task-node"), (ru.runa.xpdl.generated.jpdl32.TaskNode.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "to"), (ru.runa.xpdl.generated.jpdl32.To.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "subject"), (ru.runa.xpdl.generated.jpdl32.Subject.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "mail-node"), (ru.runa.xpdl.generated.jpdl32.MailNode.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "controller"), (ru.runa.xpdl.generated.jpdl32.Controller.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "variable"), (ru.runa.xpdl.generated.jpdl32.Variable.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "process-state"), (ru.runa.xpdl.generated.jpdl32.ProcessState.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "node"), (ru.runa.xpdl.generated.jpdl32.Node.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "assignment"), (ru.runa.xpdl.generated.jpdl32.Assignment.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "create-timer"), (ru.runa.xpdl.generated.jpdl32.CreateTimer.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "end-state"), (ru.runa.xpdl.generated.jpdl32.EndState.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "super-state"), (ru.runa.xpdl.generated.jpdl32.SuperState.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "join"), (ru.runa.xpdl.generated.jpdl32.Join.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "transition"), (ru.runa.xpdl.generated.jpdl32.Transition.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "cancel-timer"), (ru.runa.xpdl.generated.jpdl32.CancelTimer.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "start-state"), (ru.runa.xpdl.generated.jpdl32.StartState.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "process-definition"), (ru.runa.xpdl.generated.jpdl32.ProcessDefinition.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "script"), (ru.runa.xpdl.generated.jpdl32.Script.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "text"), (ru.runa.xpdl.generated.jpdl32.Text.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "fork"), (ru.runa.xpdl.generated.jpdl32.Fork.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "swimlane"), (ru.runa.xpdl.generated.jpdl32.Swimlane.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "mail"), (ru.runa.xpdl.generated.jpdl32.Mail.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "template"), (ru.runa.xpdl.generated.jpdl32.Template.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "task"), (ru.runa.xpdl.generated.jpdl32.Task.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "recipients"), (ru.runa.xpdl.generated.jpdl32.Recipients.class));
        rootTagMap.put(new javax.xml.namespace.QName("urn:jbpm.org:jpdl-3.2", "send-message"), (ru.runa.xpdl.generated.jpdl32.SendMessage.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: ru.runa.xpdl.generated.jpdl32
     * 
     */
    public ObjectFactory() {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface
     *     the Class object of the javacontent interface to instantiate
     * @return
     *     a new instance
     * @throws JAXBException
     *     if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @return
     *     the value of the requested property
     * @throws PropertyException
     *     when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @param value
     *     the value of the property to be set
     * @throws PropertyException
     *     when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of Swimlane
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Swimlane createSwimlane()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.SwimlaneImpl();
    }

    /**
     * Create an instance of Subject
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Subject createSubject()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.SubjectImpl();
    }

    /**
     * Create an instance of Subject
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Subject createSubject(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.SubjectImpl(value);
    }

    /**
     * Create an instance of ForkType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.ForkType createForkType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ForkTypeImpl();
    }

    /**
     * Create an instance of ProcessStateTypeSubProcessType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.ProcessStateType.SubProcessType createProcessStateTypeSubProcessType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ProcessStateTypeImpl.SubProcessTypeImpl();
    }

    /**
     * Create an instance of TransitionTypeCondition
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.TransitionType.Condition createTransitionTypeCondition()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TransitionTypeImpl.ConditionImpl();
    }

    /**
     * Create an instance of ProcessStateType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.ProcessStateType createProcessStateType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ProcessStateTypeImpl();
    }

    /**
     * Create an instance of Transition
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Transition createTransition()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TransitionImpl();
    }

    /**
     * Create an instance of MultiinstanceState
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.MultiinstanceState createMultiinstanceState()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.MultiinstanceStateImpl();
    }

    /**
     * Create an instance of TaskNodeType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.TaskNodeType createTaskNodeType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TaskNodeTypeImpl();
    }

    /**
     * Create an instance of TimerType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.TimerType createTimerType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TimerTypeImpl();
    }

    /**
     * Create an instance of Task
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Task createTask()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TaskImpl();
    }

    /**
     * Create an instance of Text
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Text createText()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TextImpl();
    }

    /**
     * Create an instance of Text
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Text createText(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TextImpl(value);
    }

    /**
     * Create an instance of MultiinstanceStateTypeSubProcessType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.MultiinstanceStateType.SubProcessType createMultiinstanceStateTypeSubProcessType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.MultiinstanceStateTypeImpl.SubProcessTypeImpl();
    }

    /**
     * Create an instance of TaskType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.TaskType createTaskType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TaskTypeImpl();
    }

    /**
     * Create an instance of ExceptionHandler
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.ExceptionHandler createExceptionHandler()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ExceptionHandlerImpl();
    }

    /**
     * Create an instance of SuperStateType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.SuperStateType createSuperStateType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.SuperStateTypeImpl();
    }

    /**
     * Create an instance of ProcessDefinition
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.ProcessDefinition createProcessDefinition()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ProcessDefinitionImpl();
    }

    /**
     * Create an instance of VariableType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.VariableType createVariableType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.VariableTypeImpl();
    }

    /**
     * Create an instance of ProcessDefinitionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.ProcessDefinitionType createProcessDefinitionType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ProcessDefinitionTypeImpl();
    }

    /**
     * Create an instance of State
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.State createState()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.StateImpl();
    }

    /**
     * Create an instance of ProcessStateTypeSubProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.ProcessStateType.SubProcess createProcessStateTypeSubProcess()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ProcessStateTypeImpl.SubProcessImpl();
    }

    /**
     * Create an instance of Mail
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Mail createMail()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.MailImpl();
    }

    /**
     * Create an instance of ReceiveMessageType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.ReceiveMessageType createReceiveMessageType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ReceiveMessageTypeImpl();
    }

    /**
     * Create an instance of SwimlaneType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.SwimlaneType createSwimlaneType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.SwimlaneTypeImpl();
    }

    /**
     * Create an instance of Recipients
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Recipients createRecipients()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.RecipientsImpl();
    }

    /**
     * Create an instance of Recipients
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Recipients createRecipients(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.RecipientsImpl(value);
    }

    /**
     * Create an instance of EventType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.EventType createEventType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.EventTypeImpl();
    }

    /**
     * Create an instance of Fork
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Fork createFork()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ForkImpl();
    }

    /**
     * Create an instance of MailNode
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.MailNode createMailNode()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.MailNodeImpl();
    }

    /**
     * Create an instance of Script
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Script createScript()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ScriptImpl();
    }

    /**
     * Create an instance of MailType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.MailType createMailType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.MailTypeImpl();
    }

    /**
     * Create an instance of Action
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Action createAction()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ActionImpl();
    }

    /**
     * Create an instance of MailNodeType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.MailNodeType createMailNodeType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.MailNodeTypeImpl();
    }

    /**
     * Create an instance of CreateTimer
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.CreateTimer createCreateTimer()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.CreateTimerImpl();
    }

    /**
     * Create an instance of Delegation
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Delegation createDelegation()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.DelegationImpl();
    }

    /**
     * Create an instance of StartState
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.StartState createStartState()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.StartStateImpl();
    }

    /**
     * Create an instance of MultiinstanceStateTypeSubProcess
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.MultiinstanceStateType.SubProcess createMultiinstanceStateTypeSubProcess()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.MultiinstanceStateTypeImpl.SubProcessImpl();
    }

    /**
     * Create an instance of TaskTypeReminder
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.TaskType.Reminder createTaskTypeReminder()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TaskTypeImpl.ReminderImpl();
    }

    /**
     * Create an instance of ActionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.ActionType createActionType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ActionTypeImpl();
    }

    /**
     * Create an instance of Node
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Node createNode()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.NodeImpl();
    }

    /**
     * Create an instance of AssignmentType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.AssignmentType createAssignmentType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.AssignmentTypeImpl();
    }

    /**
     * Create an instance of SuperState
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.SuperState createSuperState()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.SuperStateImpl();
    }

    /**
     * Create an instance of ProcessState
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.ProcessState createProcessState()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ProcessStateImpl();
    }

    /**
     * Create an instance of TaskTypeReminderType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.TaskType.ReminderType createTaskTypeReminderType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TaskTypeImpl.ReminderTypeImpl();
    }

    /**
     * Create an instance of JoinType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.JoinType createJoinType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.JoinTypeImpl();
    }

    /**
     * Create an instance of CancelTimerType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.CancelTimerType createCancelTimerType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.CancelTimerTypeImpl();
    }

    /**
     * Create an instance of StateType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.StateType createStateType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.StateTypeImpl();
    }

    /**
     * Create an instance of Variable
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Variable createVariable()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.VariableImpl();
    }

    /**
     * Create an instance of EndStateType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.EndStateType createEndStateType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.EndStateTypeImpl();
    }

    /**
     * Create an instance of To
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.To createTo()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ToImpl();
    }

    /**
     * Create an instance of To
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.To createTo(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ToImpl(value);
    }

    /**
     * Create an instance of ScriptType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.ScriptType createScriptType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ScriptTypeImpl();
    }

    /**
     * Create an instance of TransitionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.TransitionType createTransitionType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TransitionTypeImpl();
    }

    /**
     * Create an instance of Timer
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Timer createTimer()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TimerImpl();
    }

    /**
     * Create an instance of TransitionTypeConditionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.TransitionType.ConditionType createTransitionTypeConditionType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TransitionTypeImpl.ConditionTypeImpl();
    }

    /**
     * Create an instance of ExceptionHandlerType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.ExceptionHandlerType createExceptionHandlerType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ExceptionHandlerTypeImpl();
    }

    /**
     * Create an instance of CreateTimerType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.CreateTimerType createCreateTimerType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.CreateTimerTypeImpl();
    }

    /**
     * Create an instance of Assignment
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Assignment createAssignment()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.AssignmentImpl();
    }

    /**
     * Create an instance of EndState
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.EndState createEndState()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.EndStateImpl();
    }

    /**
     * Create an instance of Template
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Template createTemplate()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TemplateImpl();
    }

    /**
     * Create an instance of Template
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Template createTemplate(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TemplateImpl(value);
    }

    /**
     * Create an instance of ReceiveMessage
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.ReceiveMessage createReceiveMessage()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ReceiveMessageImpl();
    }

    /**
     * Create an instance of DecisionTypeHandler
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.DecisionType.Handler createDecisionTypeHandler()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.DecisionTypeImpl.HandlerImpl();
    }

    /**
     * Create an instance of DecisionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.DecisionType createDecisionType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.DecisionTypeImpl();
    }

    /**
     * Create an instance of Decision
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Decision createDecision()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.DecisionImpl();
    }

    /**
     * Create an instance of MultiinstanceStateType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.MultiinstanceStateType createMultiinstanceStateType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.MultiinstanceStateTypeImpl();
    }

    /**
     * Create an instance of TaskNode
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.TaskNode createTaskNode()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.TaskNodeImpl();
    }

    /**
     * Create an instance of Description
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Description createDescription()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.DescriptionImpl();
    }

    /**
     * Create an instance of Description
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Description createDescription(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.DescriptionImpl(value);
    }

    /**
     * Create an instance of Controller
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Controller createController()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.ControllerImpl();
    }

    /**
     * Create an instance of StartStateType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.StartStateType createStartStateType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.StartStateTypeImpl();
    }

    /**
     * Create an instance of Join
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Join createJoin()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.JoinImpl();
    }

    /**
     * Create an instance of NodeType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.NodeType createNodeType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.NodeTypeImpl();
    }

    /**
     * Create an instance of SendMessage
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.SendMessage createSendMessage()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.SendMessageImpl();
    }

    /**
     * Create an instance of Event
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.Event createEvent()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.EventImpl();
    }

    /**
     * Create an instance of CancelTimer
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.CancelTimer createCancelTimer()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.CancelTimerImpl();
    }

    /**
     * Create an instance of SendMessageType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public ru.runa.xpdl.generated.jpdl32.SendMessageType createSendMessageType()
        throws javax.xml.bind.JAXBException
    {
        return new ru.runa.xpdl.generated.jpdl32.impl.SendMessageTypeImpl();
    }

}
