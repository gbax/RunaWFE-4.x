//
// This file was ru.runa.xpdl.generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.05.23 at 09:51:37 PM MSD 
//


package ru.runa.xpdl.generated.bpmnxpdl.impl;

public class NodeGraphicsInfoTypeImpl implements ru.runa.xpdl.generated.bpmnxpdl.NodeGraphicsInfoType, com.sun.xml.bind.JAXBObject, ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallableObject, ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.XMLSerializable, ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.ValidatableObject
{

    protected java.lang.String _Shape;
    protected com.sun.xml.bind.util.ListImpl _Any;
    protected java.lang.String _PageId;
    protected java.lang.String _FillColor;
    protected java.lang.String _ToolId;
    protected java.lang.String _Page;
    protected java.lang.String _BorderColor;
    protected boolean has_IsVisible;
    protected boolean _IsVisible;
    protected java.lang.String _LaneId;
    protected boolean has_Height;
    protected double _Height;
    protected boolean has_Width;
    protected double _Width;
    protected ru.runa.xpdl.generated.bpmnxpdl.CoordinatesType _Coordinates;
    public final static java.lang.Class version = (ru.runa.xpdl.generated.bpmnxpdl.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (ru.runa.xpdl.generated.bpmnxpdl.NodeGraphicsInfoType.class);
    }

    public java.lang.String getShape() {
        return _Shape;
    }

    public void setShape(java.lang.String value) {
        _Shape = value;
    }

    protected com.sun.xml.bind.util.ListImpl _getAny() {
        if (_Any == null) {
            _Any = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Any;
    }

    public java.util.List getAny() {
        return _getAny();
    }

    public java.lang.String getPageId() {
        return _PageId;
    }

    public void setPageId(java.lang.String value) {
        _PageId = value;
    }

    public java.lang.String getFillColor() {
        return _FillColor;
    }

    public void setFillColor(java.lang.String value) {
        _FillColor = value;
    }

    public java.lang.String getToolId() {
        return _ToolId;
    }

    public void setToolId(java.lang.String value) {
        _ToolId = value;
    }

    public java.lang.String getPage() {
        return _Page;
    }

    public void setPage(java.lang.String value) {
        _Page = value;
    }

    public java.lang.String getBorderColor() {
        return _BorderColor;
    }

    public void setBorderColor(java.lang.String value) {
        _BorderColor = value;
    }

    public boolean isIsVisible() {
        if (!has_IsVisible) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("true"));
        } else {
            return _IsVisible;
        }
    }

    public void setIsVisible(boolean value) {
        _IsVisible = value;
        has_IsVisible = true;
    }

    public java.lang.String getLaneId() {
        return _LaneId;
    }

    public void setLaneId(java.lang.String value) {
        _LaneId = value;
    }

    public double getHeight() {
        return _Height;
    }

    public void setHeight(double value) {
        _Height = value;
        has_Height = true;
    }

    public double getWidth() {
        return _Width;
    }

    public void setWidth(double value) {
        _Width = value;
        has_Width = true;
    }

    public ru.runa.xpdl.generated.bpmnxpdl.CoordinatesType getCoordinates() {
        return _Coordinates;
    }

    public void setCoordinates(ru.runa.xpdl.generated.bpmnxpdl.CoordinatesType value) {
        _Coordinates = value;
    }

    public ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallingEventHandler createUnmarshaller(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallingContext context) {
        return new ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfoTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = ((_Any == null)? 0 :_Any.size());
        if (_Coordinates!= null) {
            if (_Coordinates instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Coordinates), "Coordinates");
            } else {
                context.startElement("http://www.wfmc.org/2008/XPDL2.1", "Coordinates");
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Coordinates), "Coordinates");
                context.endNamespaceDecls();
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Coordinates), "Coordinates");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Coordinates), "Coordinates");
                context.endElement();
            }
        }
        while (idx2 != len2) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Any.get(idx2 ++)), "Any");
        }
    }

    public void serializeAttributes(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = ((_Any == null)? 0 :_Any.size());
        if (_BorderColor!= null) {
            context.startAttribute("", "BorderColor");
            try {
                context.text(((java.lang.String) _BorderColor), "BorderColor");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_FillColor!= null) {
            context.startAttribute("", "FillColor");
            try {
                context.text(((java.lang.String) _FillColor), "FillColor");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Height) {
            context.startAttribute("", "Height");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDouble(((double) _Height)), "Height");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_IsVisible) {
            context.startAttribute("", "IsVisible");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _IsVisible)), "IsVisible");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_LaneId!= null) {
            context.startAttribute("", "LaneId");
            try {
                context.text(((java.lang.String) _LaneId), "LaneId");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Page!= null) {
            context.startAttribute("", "Page");
            try {
                context.text(((java.lang.String) _Page), "Page");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_PageId!= null) {
            context.startAttribute("", "PageId");
            try {
                context.text(((java.lang.String) _PageId), "PageId");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Shape!= null) {
            context.startAttribute("", "Shape");
            try {
                context.text(((java.lang.String) _Shape), "Shape");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_ToolId!= null) {
            context.startAttribute("", "ToolId");
            try {
                context.text(((java.lang.String) _ToolId), "ToolId");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Width) {
            context.startAttribute("", "Width");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printDouble(((double) _Width)), "Width");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Coordinates!= null) {
            if (_Coordinates instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Coordinates), "Coordinates");
            }
        }
        while (idx2 != len2) {
            idx2 += 1;
        }
    }

    public void serializeURIs(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = ((_Any == null)? 0 :_Any.size());
        if (_Coordinates!= null) {
            if (_Coordinates instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Coordinates), "Coordinates");
            }
        }
        while (idx2 != len2) {
            idx2 += 1;
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (ru.runa.xpdl.generated.bpmnxpdl.NodeGraphicsInfoType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.gram"
+"mar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\u0010sr\u0000\u0011java.lang.Boolean\u00cd"
+" r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.sun.msv.grammar.trex.ElementPa"
+"ttern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClas"
+"s;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUnde"
+"claredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0014p\u0000sq\u0000~\u0000\u0010ppsr\u0000"
+" com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv."
+"grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0014psr\u0000 com.su"
+"n.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClass"
+"q\u0000~\u0000\u0016xq\u0000~\u0000\u0003q\u0000~\u0000\u0014psr\u00002com.sun.msv.grammar.Expression$AnyStrin"
+"gExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u0013\u0001q\u0000~\u0000 sr\u0000 com.sun.msv.gram"
+"mar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpre"
+"ssion\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000!q\u0000~\u0000&sr\u0000#com.sun.msv.grammar.Simp"
+"leNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fna"
+"mespaceURIq\u0000~\u0000(xq\u0000~\u0000#t\u0000\u001egenerated.bpmnxpdl.Coordinatest\u0000+htt"
+"p://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0015q\u0000~\u0000\u0014p\u0000sq\u0000~\u0000\u0000p"
+"psq\u0000~\u0000\u0015pp\u0000sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001aq\u0000~\u0000\u0014psq\u0000~\u0000\u001dq\u0000~\u0000\u0014pq\u0000~\u0000 q\u0000~\u0000$q\u0000~\u0000&sq\u0000"
+"~\u0000\'t\u0000\"ru.runa.xpdl.generated.bpmnxpdl.CoordinatesTypeq\u0000~\u0000+sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq"
+"\u0000~\u0000\u0014psr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/"
+"relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/m"
+"sv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype.xsd.Qnam"
+"eType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicTy"
+"pe\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L"
+"\u0000\fnamespaceUriq\u0000~\u0000(L\u0000\btypeNameq\u0000~\u0000(L\u0000\nwhiteSpacet\u0000.Lcom/sun/"
+"msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/"
+"2001/XMLSchemat\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd.WhiteSpac"
+"eProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.W"
+"hiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expre"
+"ssion$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u0014psr\u0000\u001bcom.sun.ms"
+"v.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000(L\u0000\fnamespaceURI"
+"q\u0000~\u0000(xpq\u0000~\u0000Aq\u0000~\u0000@sq\u0000~\u0000\'t\u0000\u0004typet\u0000)http://www.w3.org/2001/XMLS"
+"chema-instanceq\u0000~\u0000&sq\u0000~\u0000\'t\u0000\u000bCoordinatest\u0000 http://www.wfmc.or"
+"g/2008/XPDL2.1q\u0000~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001aq\u0000~\u0000\u0014psq\u0000~\u0000\u0015q\u0000~\u0000\u0014p\u0000sq\u0000~\u0000\u001dpp"
+"q\u0000~\u0000 sr\u0000\'com.sun.msv.grammar.DifferenceNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L"
+"\u0000\u0003nc1q\u0000~\u0000\u0016L\u0000\u0003nc2q\u0000~\u0000\u0016xq\u0000~\u0000#q\u0000~\u0000$sr\u0000#com.sun.msv.grammar.Choi"
+"ceNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003nc1q\u0000~\u0000\u0016L\u0000\u0003nc2q\u0000~\u0000\u0016xq\u0000~\u0000#sr\u0000&com.su"
+"n.msv.grammar.NamespaceNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\fnamespaceURIq\u0000"
+"~\u0000(xq\u0000~\u0000#t\u0000\u0000sq\u0000~\u0000Wq\u0000~\u0000Nsq\u0000~\u0000Wq\u0000~\u0000+q\u0000~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0014ps"
+"q\u0000~\u00006q\u0000~\u0000\u0014psr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0001Z\u0000\risAlwaysValidxq\u0000~\u0000;q\u0000~\u0000@t\u0000\u0006stringsr\u00005com.sun.msv.datatyp"
+"e.xsd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000C\u0001q\u0000~\u0000Fsq\u0000"
+"~\u0000Gq\u0000~\u0000aq\u0000~\u0000@sq\u0000~\u0000\'t\u0000\u000bBorderColorq\u0000~\u0000Yq\u0000~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~"
+"\u0000\u0014pq\u0000~\u0000^sq\u0000~\u0000\'t\u0000\tFillColorq\u0000~\u0000Yq\u0000~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0014psq\u0000~"
+"\u00006ppsr\u0000#com.sun.msv.datatype.xsd.DoubleType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000+co"
+"m.sun.msv.datatype.xsd.FloatingNumberType\u00fc\u00e3\u00b6\u0087\u008c\u00a8|\u00e0\u0002\u0000\u0000xq\u0000~\u0000;q\u0000"
+"~\u0000@t\u0000\u0006doubleq\u0000~\u0000Dq\u0000~\u0000Fsq\u0000~\u0000Gq\u0000~\u0000qq\u0000~\u0000@sq\u0000~\u0000\'t\u0000\u0006Heightq\u0000~\u0000Yq\u0000"
+"~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0014psq\u0000~\u00006ppsr\u0000$com.sun.msv.datatype.xsd."
+"BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000;q\u0000~\u0000@t\u0000\u0007booleanq\u0000~\u0000Dq\u0000~\u0000Fsq\u0000~\u0000Gq"
+"\u0000~\u0000zq\u0000~\u0000@sq\u0000~\u0000\'t\u0000\tIsVisibleq\u0000~\u0000Yq\u0000~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0014psq\u0000"
+"~\u00006ppsr\u0000$com.sun.msv.datatype.xsd.NmtokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\""
+"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000_q\u0000~\u0000@t\u0000\u0007N"
+"MTOKENq\u0000~\u0000D\u0000q\u0000~\u0000Fsq\u0000~\u0000Gq\u0000~\u0000\u0084q\u0000~\u0000@sq\u0000~\u0000\'t\u0000\u0006LaneIdq\u0000~\u0000Yq\u0000~\u0000&sq"
+"\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0014pq\u0000~\u0000\u0080sq\u0000~\u0000\'t\u0000\u0004Pageq\u0000~\u0000Yq\u0000~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001d"
+"q\u0000~\u0000\u0014psq\u0000~\u00006ppsr\u0000\'com.sun.msv.datatype.xsd.FinalComponent\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\nfinalValuexr\u0000\u001ecom.sun.msv.datatype.xsd.Proxy\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bbaseTypet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImpl"
+";xq\u0000~\u0000=q\u0000~\u0000Nt\u0000\u0005IdRefq\u0000~\u0000Dq\u0000~\u0000\u0083\u0000\u0000\u0000\u0000q\u0000~\u0000Fsq\u0000~\u0000Gq\u0000~\u0000\u0084q\u0000~\u0000Nsq\u0000~\u0000"
+"\'t\u0000\u0006PageIdq\u0000~\u0000Yq\u0000~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0014pq\u0000~\u0000^sq\u0000~\u0000\'t\u0000\u0005Shapeq"
+"\u0000~\u0000Yq\u0000~\u0000&sq\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0014pq\u0000~\u0000^sq\u0000~\u0000\'t\u0000\u0006ToolIdq\u0000~\u0000Yq\u0000~\u0000&s"
+"q\u0000~\u0000\u0010ppsq\u0000~\u0000\u001dq\u0000~\u0000\u0014pq\u0000~\u0000msq\u0000~\u0000\'t\u0000\u0005Widthq\u0000~\u0000Yq\u0000~\u0000&sr\u0000\"com.sun."
+"msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/"
+"msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.gram"
+"mar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVer"
+"sionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u001f\u0001p"
+"q\u0000~\u0000\u001cq\u0000~\u00000q\u0000~\u0000kq\u0000~\u0000uq\u0000~\u0000\u0006q\u0000~\u0000\u0019q\u0000~\u0000/q\u0000~\u0000Pq\u0000~\u0000\u0097q\u0000~\u0000-q\u0000~\u0000\bq\u0000~\u0000\\"
+"q\u0000~\u0000\rq\u0000~\u0000\u009bq\u0000~\u0000\u0007q\u0000~\u0000\u000eq\u0000~\u0000Oq\u0000~\u0000\u000fq\u0000~\u0000\u009fq\u0000~\u0000\u0005q\u0000~\u0000\u000bq\u0000~\u0000gq\u0000~\u0000\nq\u0000~\u00004"
+"q\u0000~\u0000\fq\u0000~\u0000\u0011q\u0000~\u0000\u0012q\u0000~\u0000\u008cq\u0000~\u0000\tq\u0000~\u0000~q\u0000~\u0000\u0088x"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallingContext context) {
            super(context, "-----------------------------------");
        }

        protected Unmarshaller(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return ru.runa.xpdl.generated.bpmnxpdl.impl.NodeGraphicsInfoTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        attIdx = context.getAttribute("", "Height");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText1(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  31 :
                        attIdx = context.getAttribute("", "XCoordinate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "YCoordinate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (!(("" == ___uri)||("http://www.wfmc.org/2008/XPDL2.1" == ___uri))) {
                            _Coordinates = ((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 32, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        _Coordinates = ((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 32, ___uri, ___local, ___qname, __atts));
                        return ;
                    case  18 :
                        attIdx = context.getAttribute("", "PageId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText2(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "ToolId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 27;
                            eatText3(v);
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  34 :
                        if (!(("" == ___uri)||("http://www.wfmc.org/2008/XPDL2.1" == ___uri))) {
                            java.lang.Object co = spawnWildcard(34, ___uri, ___local, ___qname, __atts);
                            if (co!= null) {
                                _getAny().add(co);
                            }
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  33 :
                        if (!(("" == ___uri)||("http://www.wfmc.org/2008/XPDL2.1" == ___uri))) {
                            java.lang.Object co = spawnWildcard(34, ___uri, ___local, ___qname, __atts);
                            if (co!= null) {
                                _getAny().add(co);
                            }
                            return ;
                        }
                        state = 34;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "LaneId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText4(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  21 :
                        attIdx = context.getAttribute("", "Shape");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 24;
                            eatText5(v);
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  30 :
                        if (("Coordinates" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            _Coordinates = ((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesImpl.class), 33, ___uri, ___local, ___qname, __atts));
                            return ;
                        }
                        if (("Coordinates" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 31;
                            return ;
                        }
                        state = 33;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "BorderColor");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText6(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "IsVisible");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText7(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  27 :
                        attIdx = context.getAttribute("", "Width");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 30;
                            eatText8(v);
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  15 :
                        attIdx = context.getAttribute("", "Page");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText9(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "FillColor");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText10(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Height = javax.xml.bind.DatatypeConverter.parseDouble(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Height = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _PageId = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ToolId = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _LaneId = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Shape = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _BorderColor = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _IsVisible = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_IsVisible = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText8(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Width = javax.xml.bind.DatatypeConverter.parseDouble(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_Width = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText9(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Page = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText10(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _FillColor = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        attIdx = context.getAttribute("", "Height");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText1(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  31 :
                        attIdx = context.getAttribute("", "XCoordinate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "YCoordinate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _Coordinates = ((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromLeaveElement((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 32, ___uri, ___local, ___qname));
                        return ;
                    case  18 :
                        attIdx = context.getAttribute("", "PageId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText2(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "ToolId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 27;
                            eatText3(v);
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  34 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  33 :
                        state = 34;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "LaneId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText4(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  21 :
                        attIdx = context.getAttribute("", "Shape");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 24;
                            eatText5(v);
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  30 :
                        state = 33;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "BorderColor");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText6(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "IsVisible");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText7(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  27 :
                        attIdx = context.getAttribute("", "Width");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 30;
                            eatText8(v);
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  32 :
                        if (("Coordinates" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            context.popAttributes();
                            state = 33;
                            return ;
                        }
                        break;
                    case  15 :
                        attIdx = context.getAttribute("", "Page");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText9(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "FillColor");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText10(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        if (("Height" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  31 :
                        if (("XCoordinate" == ___local)&&("" == ___uri)) {
                            _Coordinates = ((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromEnterAttribute((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 32, ___uri, ___local, ___qname));
                            return ;
                        }
                        if (("YCoordinate" == ___local)&&("" == ___uri)) {
                            _Coordinates = ((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromEnterAttribute((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 32, ___uri, ___local, ___qname));
                            return ;
                        }
                        _Coordinates = ((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromEnterAttribute((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 32, ___uri, ___local, ___qname));
                        return ;
                    case  18 :
                        if (("PageId" == ___local)&&("" == ___uri)) {
                            state = 19;
                            return ;
                        }
                        state = 21;
                        continue outer;
                    case  24 :
                        if (("ToolId" == ___local)&&("" == ___uri)) {
                            state = 25;
                            return ;
                        }
                        state = 27;
                        continue outer;
                    case  34 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  33 :
                        state = 34;
                        continue outer;
                    case  12 :
                        if (("LaneId" == ___local)&&("" == ___uri)) {
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                    case  21 :
                        if (("Shape" == ___local)&&("" == ___uri)) {
                            state = 22;
                            return ;
                        }
                        state = 24;
                        continue outer;
                    case  30 :
                        state = 33;
                        continue outer;
                    case  0 :
                        if (("BorderColor" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  9 :
                        if (("IsVisible" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  27 :
                        if (("Width" == ___local)&&("" == ___uri)) {
                            state = 28;
                            return ;
                        }
                        state = 30;
                        continue outer;
                    case  15 :
                        if (("Page" == ___local)&&("" == ___uri)) {
                            state = 16;
                            return ;
                        }
                        state = 18;
                        continue outer;
                    case  3 :
                        if (("FillColor" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        attIdx = context.getAttribute("", "Height");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText1(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  14 :
                        if (("LaneId" == ___local)&&("" == ___uri)) {
                            state = 15;
                            return ;
                        }
                        break;
                    case  23 :
                        if (("Shape" == ___local)&&("" == ___uri)) {
                            state = 24;
                            return ;
                        }
                        break;
                    case  8 :
                        if (("Height" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  31 :
                        attIdx = context.getAttribute("", "XCoordinate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "YCoordinate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _Coordinates = ((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromLeaveAttribute((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 32, ___uri, ___local, ___qname));
                        return ;
                    case  11 :
                        if (("IsVisible" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                    case  18 :
                        attIdx = context.getAttribute("", "PageId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText2(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "ToolId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 27;
                            eatText3(v);
                            continue outer;
                        }
                        state = 27;
                        continue outer;
                    case  17 :
                        if (("Page" == ___local)&&("" == ___uri)) {
                            state = 18;
                            return ;
                        }
                        break;
                    case  34 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  33 :
                        state = 34;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "LaneId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText4(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  29 :
                        if (("Width" == ___local)&&("" == ___uri)) {
                            state = 30;
                            return ;
                        }
                        break;
                    case  21 :
                        attIdx = context.getAttribute("", "Shape");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 24;
                            eatText5(v);
                            continue outer;
                        }
                        state = 24;
                        continue outer;
                    case  30 :
                        state = 33;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "BorderColor");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText6(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "IsVisible");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText7(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  2 :
                        if (("BorderColor" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  20 :
                        if (("PageId" == ___local)&&("" == ___uri)) {
                            state = 21;
                            return ;
                        }
                        break;
                    case  27 :
                        attIdx = context.getAttribute("", "Width");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 30;
                            eatText8(v);
                            continue outer;
                        }
                        state = 30;
                        continue outer;
                    case  26 :
                        if (("ToolId" == ___local)&&("" == ___uri)) {
                            state = 27;
                            return ;
                        }
                        break;
                    case  15 :
                        attIdx = context.getAttribute("", "Page");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText9(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "FillColor");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText10(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  5 :
                        if (("FillColor" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  6 :
                            attIdx = context.getAttribute("", "Height");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 9;
                                eatText1(v);
                                continue outer;
                            }
                            state = 9;
                            continue outer;
                        case  4 :
                            state = 5;
                            eatText10(value);
                            return ;
                        case  1 :
                            state = 2;
                            eatText6(value);
                            return ;
                        case  31 :
                            attIdx = context.getAttribute("", "XCoordinate");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "YCoordinate");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _Coordinates = ((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromText((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 32, value));
                            return ;
                        case  18 :
                            attIdx = context.getAttribute("", "PageId");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 21;
                                eatText2(v);
                                continue outer;
                            }
                            state = 21;
                            continue outer;
                        case  24 :
                            attIdx = context.getAttribute("", "ToolId");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 27;
                                eatText3(v);
                                continue outer;
                            }
                            state = 27;
                            continue outer;
                        case  34 :
                            revertToParentFromText(value);
                            return ;
                        case  33 :
                            state = 34;
                            continue outer;
                        case  13 :
                            state = 14;
                            eatText4(value);
                            return ;
                        case  12 :
                            attIdx = context.getAttribute("", "LaneId");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 15;
                                eatText4(v);
                                continue outer;
                            }
                            state = 15;
                            continue outer;
                        case  25 :
                            state = 26;
                            eatText3(value);
                            return ;
                        case  7 :
                            state = 8;
                            eatText1(value);
                            return ;
                        case  21 :
                            attIdx = context.getAttribute("", "Shape");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 24;
                                eatText5(v);
                                continue outer;
                            }
                            state = 24;
                            continue outer;
                        case  30 :
                            state = 33;
                            continue outer;
                        case  10 :
                            state = 11;
                            eatText7(value);
                            return ;
                        case  0 :
                            attIdx = context.getAttribute("", "BorderColor");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText6(v);
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  9 :
                            attIdx = context.getAttribute("", "IsVisible");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 12;
                                eatText7(v);
                                continue outer;
                            }
                            state = 12;
                            continue outer;
                        case  16 :
                            state = 17;
                            eatText9(value);
                            return ;
                        case  28 :
                            state = 29;
                            eatText8(value);
                            return ;
                        case  19 :
                            state = 20;
                            eatText2(value);
                            return ;
                        case  27 :
                            attIdx = context.getAttribute("", "Width");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 30;
                                eatText8(v);
                                continue outer;
                            }
                            state = 30;
                            continue outer;
                        case  22 :
                            state = 23;
                            eatText5(value);
                            return ;
                        case  15 :
                            attIdx = context.getAttribute("", "Page");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 18;
                                eatText9(v);
                                continue outer;
                            }
                            state = 18;
                            continue outer;
                        case  3 :
                            attIdx = context.getAttribute("", "FillColor");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 6;
                                eatText10(v);
                                continue outer;
                            }
                            state = 6;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
