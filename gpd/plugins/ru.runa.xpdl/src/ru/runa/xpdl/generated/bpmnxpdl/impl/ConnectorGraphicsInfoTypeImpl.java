//
// This file was ru.runa.xpdl.generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.5-b16-fcs
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.05.23 at 09:51:37 PM MSD 
//


package ru.runa.xpdl.generated.bpmnxpdl.impl;

public class ConnectorGraphicsInfoTypeImpl implements ru.runa.xpdl.generated.bpmnxpdl.ConnectorGraphicsInfoType, com.sun.xml.bind.JAXBObject, ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallableObject, ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.XMLSerializable, ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _Any;
    protected java.lang.String _PageId;
    protected java.lang.String _FillColor;
    protected java.lang.String _ToolId;
    protected java.lang.String _Page;
    protected java.lang.String _BorderColor;
    protected java.lang.String _Style;
    protected boolean has_IsVisible;
    protected boolean _IsVisible;
    protected com.sun.xml.bind.util.ListImpl _Coordinates;
    public final static java.lang.Class version = (ru.runa.xpdl.generated.bpmnxpdl.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (ru.runa.xpdl.generated.bpmnxpdl.ConnectorGraphicsInfoType.class);
    }

    protected com.sun.xml.bind.util.ListImpl _getAny() {
        if (_Any == null) {
            _Any = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Any;
    }

    public java.util.List getAny() {
        return _getAny();
    }

    public java.lang.String getPageId() {
        return _PageId;
    }

    public void setPageId(java.lang.String value) {
        _PageId = value;
    }

    public java.lang.String getFillColor() {
        return _FillColor;
    }

    public void setFillColor(java.lang.String value) {
        _FillColor = value;
    }

    public java.lang.String getToolId() {
        return _ToolId;
    }

    public void setToolId(java.lang.String value) {
        _ToolId = value;
    }

    public java.lang.String getPage() {
        return _Page;
    }

    public void setPage(java.lang.String value) {
        _Page = value;
    }

    public java.lang.String getBorderColor() {
        return _BorderColor;
    }

    public void setBorderColor(java.lang.String value) {
        _BorderColor = value;
    }

    public java.lang.String getStyle() {
        return _Style;
    }

    public void setStyle(java.lang.String value) {
        _Style = value;
    }

    public boolean isIsVisible() {
        if (!has_IsVisible) {
            return javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.DatatypeConverterImpl.installHook("true"));
        } else {
            return _IsVisible;
        }
    }

    public void setIsVisible(boolean value) {
        _IsVisible = value;
        has_IsVisible = true;
    }

    protected com.sun.xml.bind.util.ListImpl _getCoordinates() {
        if (_Coordinates == null) {
            _Coordinates = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
        }
        return _Coordinates;
    }

    public java.util.List getCoordinates() {
        return _getCoordinates();
    }

    public ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallingEventHandler createUnmarshaller(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallingContext context) {
        return new ru.runa.xpdl.generated.bpmnxpdl.impl.ConnectorGraphicsInfoTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Any == null)? 0 :_Any.size());
        int idx9 = 0;
        final int len9 = ((_Coordinates == null)? 0 :_Coordinates.size());
        while (idx9 != len9) {
            if (_Coordinates.get(idx9) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Coordinates.get(idx9 ++)), "Coordinates");
            } else {
                context.startElement("http://www.wfmc.org/2008/XPDL2.1", "Coordinates");
                int idx_0 = idx9;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Coordinates.get(idx_0 ++)), "Coordinates");
                context.endNamespaceDecls();
                int idx_1 = idx9;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Coordinates.get(idx_1 ++)), "Coordinates");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Coordinates.get(idx9 ++)), "Coordinates");
                context.endElement();
            }
        }
        while (idx1 != len1) {
            context.childAsBody(((com.sun.xml.bind.JAXBObject) _Any.get(idx1 ++)), "Any");
        }
    }

    public void serializeAttributes(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Any == null)? 0 :_Any.size());
        int idx9 = 0;
        final int len9 = ((_Coordinates == null)? 0 :_Coordinates.size());
        if (_BorderColor!= null) {
            context.startAttribute("", "BorderColor");
            try {
                context.text(((java.lang.String) _BorderColor), "BorderColor");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_FillColor!= null) {
            context.startAttribute("", "FillColor");
            try {
                context.text(((java.lang.String) _FillColor), "FillColor");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_IsVisible) {
            context.startAttribute("", "IsVisible");
            try {
                context.text(javax.xml.bind.DatatypeConverter.printBoolean(((boolean) _IsVisible)), "IsVisible");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Page!= null) {
            context.startAttribute("", "Page");
            try {
                context.text(((java.lang.String) _Page), "Page");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_PageId!= null) {
            context.startAttribute("", "PageId");
            try {
                context.text(((java.lang.String) _PageId), "PageId");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_Style!= null) {
            context.startAttribute("", "Style");
            try {
                context.text(((java.lang.String) _Style), "Style");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_ToolId!= null) {
            context.startAttribute("", "ToolId");
            try {
                context.text(((java.lang.String) _ToolId), "ToolId");
            } catch (java.lang.Exception e) {
                ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        while (idx9 != len9) {
            if (_Coordinates.get(idx9) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Coordinates.get(idx9 ++)), "Coordinates");
            } else {
                idx9 += 1;
            }
        }
        while (idx1 != len1) {
            idx1 += 1;
        }
    }

    public void serializeURIs(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = ((_Any == null)? 0 :_Any.size());
        int idx9 = 0;
        final int len9 = ((_Coordinates == null)? 0 :_Coordinates.size());
        while (idx9 != len9) {
            if (_Coordinates.get(idx9) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Coordinates.get(idx9 ++)), "Coordinates");
            } else {
                idx9 += 1;
            }
        }
        while (idx1 != len1) {
            idx1 += 1;
        }
    }

    public java.lang.Class getPrimaryInterface() {
        return (ru.runa.xpdl.generated.bpmnxpdl.ConnectorGraphicsInfoType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
+"expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000pp"
+"sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000"
+"xq\u0000~\u0000\u0001ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001cc"
+"om.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003sr\u0000\u0011j"
+"ava.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\rq\u0000~\u0000\u0013psr\u0000\'com.s"
+"un.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001f"
+"Lcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.Eleme"
+"ntExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModel"
+"q\u0000~\u0000\u0002xq\u0000~\u0000\u0003q\u0000~\u0000\u0013p\u0000sq\u0000~\u0000\rppsq\u0000~\u0000\u000fq\u0000~\u0000\u0013psr\u0000 com.sun.msv.gramma"
+"r.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u0016xq\u0000~\u0000\u0003q"
+"\u0000~\u0000\u0013psr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u0012\u0001q\u0000~\u0000\u001esr\u0000 com.sun.msv.grammar.AnyNameC"
+"lass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
+"psr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u001fq\u0000~\u0000$sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000"
+"~\u0000&xq\u0000~\u0000!t\u0000\u001egenerated.bpmnxpdl.Coordinatest\u0000+http://java.sun"
+".com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0015q\u0000~\u0000\u0013p\u0000sq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0015pp\u0000sq"
+"\u0000~\u0000\rppsq\u0000~\u0000\u000fq\u0000~\u0000\u0013psq\u0000~\u0000\u001bq\u0000~\u0000\u0013pq\u0000~\u0000\u001eq\u0000~\u0000\"q\u0000~\u0000$sq\u0000~\u0000%t\u0000\"genera"
+"ted.bpmnxpdl.CoordinatesTypeq\u0000~\u0000)sq\u0000~\u0000\rppsq\u0000~\u0000\u001bq\u0000~\u0000\u0013psr\u0000\u001bcom"
+".sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/data"
+"type/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/Stri"
+"ngPair;xq\u0000~\u0000\u0003ppsr\u0000\"com.sun.msv.datatype.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+"\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com"
+".sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceU"
+"riq\u0000~\u0000&L\u0000\btypeNameq\u0000~\u0000&L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype"
+"/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSche"
+"mat\u0000\u0005QNamesr\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$C"
+"ollapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpacePro"
+"cessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$NullSe"
+"tExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000\u0013psr\u0000\u001bcom.sun.msv.util.Strin"
+"gPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000&L\u0000\fnamespaceURIq\u0000~\u0000&xpq\u0000~\u0000?"
+"q\u0000~\u0000>sq\u0000~\u0000%t\u0000\u0004typet\u0000)http://www.w3.org/2001/XMLSchema-instan"
+"ceq\u0000~\u0000$sq\u0000~\u0000%t\u0000\u000bCoordinatest\u0000 http://www.wfmc.org/2008/XPDL2"
+".1q\u0000~\u0000$sq\u0000~\u0000\rppsq\u0000~\u0000\u000fq\u0000~\u0000\u0013psq\u0000~\u0000\u0015q\u0000~\u0000\u0013p\u0000sq\u0000~\u0000\u001bppq\u0000~\u0000\u001esr\u0000\'com"
+".sun.msv.grammar.DifferenceNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003nc1q\u0000~\u0000\u0016L\u0000"
+"\u0003nc2q\u0000~\u0000\u0016xq\u0000~\u0000!q\u0000~\u0000\"sr\u0000#com.sun.msv.grammar.ChoiceNameClass\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003nc1q\u0000~\u0000\u0016L\u0000\u0003nc2q\u0000~\u0000\u0016xq\u0000~\u0000!sr\u0000&com.sun.msv.gramma"
+"r.NamespaceNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\fnamespaceURIq\u0000~\u0000&xq\u0000~\u0000!t\u0000\u0000"
+"sq\u0000~\u0000Uq\u0000~\u0000Lsq\u0000~\u0000Uq\u0000~\u0000)q\u0000~\u0000$sq\u0000~\u0000\rppsq\u0000~\u0000\u001bq\u0000~\u0000\u0013psq\u0000~\u00004q\u0000~\u0000\u0013ps"
+"r\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlways"
+"Validxq\u0000~\u00009q\u0000~\u0000>t\u0000\u0006stringsr\u00005com.sun.msv.datatype.xsd.WhiteS"
+"paceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000A\u0001q\u0000~\u0000Dsq\u0000~\u0000Eq\u0000~\u0000_q\u0000~\u0000"
+">sq\u0000~\u0000%t\u0000\u000bBorderColorq\u0000~\u0000Wq\u0000~\u0000$sq\u0000~\u0000\rppsq\u0000~\u0000\u001bq\u0000~\u0000\u0013pq\u0000~\u0000\\sq\u0000~"
+"\u0000%t\u0000\tFillColorq\u0000~\u0000Wq\u0000~\u0000$sq\u0000~\u0000\rppsq\u0000~\u0000\u001bq\u0000~\u0000\u0013psq\u0000~\u00004ppsr\u0000$com."
+"sun.msv.datatype.xsd.BooleanType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00009q\u0000~\u0000>t\u0000\u0007boo"
+"leanq\u0000~\u0000Bq\u0000~\u0000Dsq\u0000~\u0000Eq\u0000~\u0000nq\u0000~\u0000>sq\u0000~\u0000%t\u0000\tIsVisibleq\u0000~\u0000Wq\u0000~\u0000$sq"
+"\u0000~\u0000\rppsq\u0000~\u0000\u001bq\u0000~\u0000\u0013psq\u0000~\u00004ppsr\u0000$com.sun.msv.datatype.xsd.Nmtok"
+"enType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\"com.sun.msv.datatype.xsd.TokenType\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000]q\u0000~\u0000>t\u0000\u0007NMTOKENq\u0000~\u0000B\u0000q\u0000~\u0000Dsq\u0000~\u0000Eq\u0000~\u0000xq\u0000~\u0000>sq\u0000~\u0000%"
+"t\u0000\u0004Pageq\u0000~\u0000Wq\u0000~\u0000$sq\u0000~\u0000\rppsq\u0000~\u0000\u001bq\u0000~\u0000\u0013psq\u0000~\u00004ppsr\u0000\'com.sun.msv"
+".datatype.xsd.FinalComponent\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\nfinalValuexr\u0000\u001ecom."
+"sun.msv.datatype.xsd.Proxy\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bbaseTypet\u0000)Lcom/sun/"
+"msv/datatype/xsd/XSDatatypeImpl;xq\u0000~\u0000;q\u0000~\u0000Lt\u0000\u0005IdRefq\u0000~\u0000Bq\u0000~\u0000"
+"w\u0000\u0000\u0000\u0000q\u0000~\u0000Dsq\u0000~\u0000Eq\u0000~\u0000xq\u0000~\u0000Lsq\u0000~\u0000%t\u0000\u0006PageIdq\u0000~\u0000Wq\u0000~\u0000$sq\u0000~\u0000\rpps"
+"q\u0000~\u0000\u001bq\u0000~\u0000\u0013pq\u0000~\u0000\\sq\u0000~\u0000%t\u0000\u0005Styleq\u0000~\u0000Wq\u0000~\u0000$sq\u0000~\u0000\rppsq\u0000~\u0000\u001bq\u0000~\u0000\u0013p"
+"q\u0000~\u0000tsq\u0000~\u0000%t\u0000\u0006ToolIdq\u0000~\u0000Wq\u0000~\u0000$sr\u0000\"com.sun.msv.grammar.Expres"
+"sionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/Expres"
+"sionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool"
+"$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lc"
+"om/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u001a\u0001pq\u0000~\u0000\u001aq\u0000~\u0000.q\u0000~\u0000\fq\u0000~"
+"\u0000Mq\u0000~\u0000\u0087q\u0000~\u0000\u000eq\u0000~\u0000\u0019q\u0000~\u0000-q\u0000~\u0000Zq\u0000~\u0000+q\u0000~\u0000\nq\u0000~\u0000|q\u0000~\u0000eq\u0000~\u0000iq\u0000~\u0000\u0006q\u0000~"
+"\u0000\u0007q\u0000~\u0000\tq\u0000~\u0000\u008bq\u0000~\u00002q\u0000~\u0000\u000bq\u0000~\u0000\u0014q\u0000~\u0000\bq\u0000~\u0000rq\u0000~\u0000\u0005q\u0000~\u0000\u0011q\u0000~\u0000Nx"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallingContext context) {
            super(context, "--------------------------");
        }

        protected Unmarshaller(ru.runa.xpdl.generated.bpmnxpdl.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return ru.runa.xpdl.generated.bpmnxpdl.impl.ConnectorGraphicsInfoTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        attIdx = context.getAttribute("", "IsVisible");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText1(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  22 :
                        if (("Coordinates" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            _getCoordinates().add(((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Coordinates" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 24;
                            return ;
                        }
                        if (!(("" == ___uri)||("http://www.wfmc.org/2008/XPDL2.1" == ___uri))) {
                            java.lang.Object co = spawnWildcard(23, ___uri, ___local, ___qname, __atts);
                            if (co!= null) {
                                _getAny().add(co);
                            }
                            return ;
                        }
                        state = 23;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "PageId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText2(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  21 :
                        if (("Coordinates" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            _getCoordinates().add(((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesImpl.class), 22, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Coordinates" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 24;
                            return ;
                        }
                        state = 22;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "BorderColor");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText3(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "Page");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText4(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  24 :
                        attIdx = context.getAttribute("", "XCoordinate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        attIdx = context.getAttribute("", "YCoordinate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        if (!(("" == ___uri)||("http://www.wfmc.org/2008/XPDL2.1" == ___uri))) {
                            _getCoordinates().add(((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 25, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _getCoordinates().add(((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromEnterElement((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 25, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  15 :
                        attIdx = context.getAttribute("", "Style");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText5(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "ToolId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText6(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "FillColor");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText7(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  23 :
                        if (!(("" == ___uri)||("http://www.wfmc.org/2008/XPDL2.1" == ___uri))) {
                            java.lang.Object co = spawnWildcard(23, ___uri, ___local, ___qname, __atts);
                            if (co!= null) {
                                _getAny().add(co);
                            }
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _IsVisible = javax.xml.bind.DatatypeConverter.parseBoolean(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
                has_IsVisible = true;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _PageId = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _BorderColor = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Page = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Style = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText6(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _ToolId = com.sun.xml.bind.WhiteSpaceProcessor.collapse(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText7(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _FillColor = value;
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        attIdx = context.getAttribute("", "IsVisible");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText1(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  22 :
                        state = 23;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "PageId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText2(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  21 :
                        state = 22;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "BorderColor");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText3(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "Page");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText4(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  25 :
                        if (("Coordinates" == ___local)&&("http://www.wfmc.org/2008/XPDL2.1" == ___uri)) {
                            context.popAttributes();
                            state = 22;
                            return ;
                        }
                        break;
                    case  24 :
                        attIdx = context.getAttribute("", "XCoordinate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "YCoordinate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        _getCoordinates().add(((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromLeaveElement((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 25, ___uri, ___local, ___qname)));
                        return ;
                    case  15 :
                        attIdx = context.getAttribute("", "Style");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText5(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "ToolId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText6(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "FillColor");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText7(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  23 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        if (("IsVisible" == ___local)&&("" == ___uri)) {
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  22 :
                        state = 23;
                        continue outer;
                    case  12 :
                        if (("PageId" == ___local)&&("" == ___uri)) {
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                    case  21 :
                        state = 22;
                        continue outer;
                    case  0 :
                        if (("BorderColor" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        state = 3;
                        continue outer;
                    case  9 :
                        if (("Page" == ___local)&&("" == ___uri)) {
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                    case  24 :
                        if (("XCoordinate" == ___local)&&("" == ___uri)) {
                            _getCoordinates().add(((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromEnterAttribute((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 25, ___uri, ___local, ___qname)));
                            return ;
                        }
                        if (("YCoordinate" == ___local)&&("" == ___uri)) {
                            _getCoordinates().add(((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromEnterAttribute((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 25, ___uri, ___local, ___qname)));
                            return ;
                        }
                        _getCoordinates().add(((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromEnterAttribute((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 25, ___uri, ___local, ___qname)));
                        return ;
                    case  15 :
                        if (("Style" == ___local)&&("" == ___uri)) {
                            state = 16;
                            return ;
                        }
                        state = 18;
                        continue outer;
                    case  18 :
                        if (("ToolId" == ___local)&&("" == ___uri)) {
                            state = 19;
                            return ;
                        }
                        state = 21;
                        continue outer;
                    case  3 :
                        if (("FillColor" == ___local)&&("" == ___uri)) {
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  23 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  6 :
                        attIdx = context.getAttribute("", "IsVisible");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText1(v);
                            continue outer;
                        }
                        state = 9;
                        continue outer;
                    case  22 :
                        state = 23;
                        continue outer;
                    case  12 :
                        attIdx = context.getAttribute("", "PageId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText2(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case  14 :
                        if (("PageId" == ___local)&&("" == ___uri)) {
                            state = 15;
                            return ;
                        }
                        break;
                    case  21 :
                        state = 22;
                        continue outer;
                    case  0 :
                        attIdx = context.getAttribute("", "BorderColor");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText3(v);
                            continue outer;
                        }
                        state = 3;
                        continue outer;
                    case  9 :
                        attIdx = context.getAttribute("", "Page");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText4(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case  5 :
                        if (("FillColor" == ___local)&&("" == ___uri)) {
                            state = 6;
                            return ;
                        }
                        break;
                    case  17 :
                        if (("Style" == ___local)&&("" == ___uri)) {
                            state = 18;
                            return ;
                        }
                        break;
                    case  11 :
                        if (("Page" == ___local)&&("" == ___uri)) {
                            state = 12;
                            return ;
                        }
                        break;
                    case  2 :
                        if (("BorderColor" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  8 :
                        if (("IsVisible" == ___local)&&("" == ___uri)) {
                            state = 9;
                            return ;
                        }
                        break;
                    case  20 :
                        if (("ToolId" == ___local)&&("" == ___uri)) {
                            state = 21;
                            return ;
                        }
                        break;
                    case  24 :
                        attIdx = context.getAttribute("", "XCoordinate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        attIdx = context.getAttribute("", "YCoordinate");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        _getCoordinates().add(((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromLeaveAttribute((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 25, ___uri, ___local, ___qname)));
                        return ;
                    case  15 :
                        attIdx = context.getAttribute("", "Style");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 18;
                            eatText5(v);
                            continue outer;
                        }
                        state = 18;
                        continue outer;
                    case  18 :
                        attIdx = context.getAttribute("", "ToolId");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 21;
                            eatText6(v);
                            continue outer;
                        }
                        state = 21;
                        continue outer;
                    case  3 :
                        attIdx = context.getAttribute("", "FillColor");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText7(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case  23 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  6 :
                            attIdx = context.getAttribute("", "IsVisible");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 9;
                                eatText1(v);
                                continue outer;
                            }
                            state = 9;
                            continue outer;
                        case  4 :
                            state = 5;
                            eatText7(value);
                            return ;
                        case  22 :
                            state = 23;
                            continue outer;
                        case  12 :
                            attIdx = context.getAttribute("", "PageId");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 15;
                                eatText2(v);
                                continue outer;
                            }
                            state = 15;
                            continue outer;
                        case  21 :
                            state = 22;
                            continue outer;
                        case  13 :
                            state = 14;
                            eatText2(value);
                            return ;
                        case  16 :
                            state = 17;
                            eatText5(value);
                            return ;
                        case  1 :
                            state = 2;
                            eatText3(value);
                            return ;
                        case  7 :
                            state = 8;
                            eatText1(value);
                            return ;
                        case  0 :
                            attIdx = context.getAttribute("", "BorderColor");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText3(v);
                                continue outer;
                            }
                            state = 3;
                            continue outer;
                        case  19 :
                            state = 20;
                            eatText6(value);
                            return ;
                        case  9 :
                            attIdx = context.getAttribute("", "Page");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 12;
                                eatText4(v);
                                continue outer;
                            }
                            state = 12;
                            continue outer;
                        case  24 :
                            attIdx = context.getAttribute("", "XCoordinate");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            attIdx = context.getAttribute("", "YCoordinate");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            _getCoordinates().add(((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl) spawnChildFromText((ru.runa.xpdl.generated.bpmnxpdl.impl.CoordinatesTypeImpl.class), 25, value)));
                            return ;
                        case  15 :
                            attIdx = context.getAttribute("", "Style");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 18;
                                eatText5(v);
                                continue outer;
                            }
                            state = 18;
                            continue outer;
                        case  10 :
                            state = 11;
                            eatText4(value);
                            return ;
                        case  18 :
                            attIdx = context.getAttribute("", "ToolId");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 21;
                                eatText6(v);
                                continue outer;
                            }
                            state = 21;
                            continue outer;
                        case  3 :
                            attIdx = context.getAttribute("", "FillColor");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                state = 6;
                                eatText7(v);
                                continue outer;
                            }
                            state = 6;
                            continue outer;
                        case  23 :
                            revertToParentFromText(value);
                            return ;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
