static DataSource dataSource;

static Sql sql;

def init() '{'
    if (dataSource != null) '{'
        return;
    '}'

    TxDataSourceProxyProvider provider = DatabaseSpringContext.getTxDataSourceProxyProvider();
    dataSource = (DataSource) provider.getTxDataSourceProxy(getDataSourceJndiName());

    sql = new Sql(getDataSource());
'}'

def getDataSourceJndiName () '{'
    return "java:/{0}";
'}'

def getDataSource() '{'
    return dataSource;
'}'

def getSql() '{'
    return sql;
'}'

//for parenthesis case
def propertyMissing(name) '{'
    name
'}'

def получить(String... колонки) '{'
    [из: '{' table ->
        [где: '{' where ->
            def columns = ""
            колонки.each '{'
                if (!columns.empty)
                    columns += '',''
                columns += wrapDatabaseObject("$'{'it'}'");
            '}'
            def sqlSelect = ''SELECT '' + columns + '' FROM '' + wrapDatabaseObject(table);
            if (where != null)
                sqlSelect += '' WHERE '' + where;
            sql.rows(sqlSelect);
        '}']
    '}']
'}'

def добавить(Map map) '{'
    [в: '{' table ->
        def keys = ""
        def values = ""
        map.each '{'
            if (!keys.empty)
                keys += '',''
            if (!values.empty)
                values += '',''
            keys += wrapDatabaseObject("$'{'it.key'}'");
            values += "''$'{'it.value'}'''"
        '}'
        def sqlInsert = ''INSERT INTO '' + wrapDatabaseObject(table) + ''('' + keys + '') values('' + values + '')'';
        sql.execute(sqlInsert);
    '}']
'}'

def обновить(String table) '{'
    [значениями: '{' Map map ->
        [где: '{' whereSql ->
            def setSql = "";
            map.each '{'
                if (!setSql.empty)
                    setSql += '',''
                setSql = wrapDatabaseObject("$'{'it.key'}'") + "=" + "''$'{'it.value'}'''"
            '}'
            def sqlUpdate = ''UPDATE '' + wrapDatabaseObject(table) + '' SET '' + setSql + '' WHERE '' + whereSql;
            sql.execute(sqlUpdate);
        '}']

    '}']

'}'

def удалить(String table) '{'
    [где: '{' whereSql ->
        def sqlDelete = ''DELETE FROM '' + wrapDatabaseObject(table);
        if (whereSql != null) '{'
            sqlDelete += '' WHERE '' + whereSql;
        '}'
        sql.execute(sqlDelete);
    '}']

'}'

def зафиксировать(String s) '{'
    sql.commit();
'}'

def откатить(String s) '{'
    sql.rollback();
'}'

def wrapDatabaseObject(String object) '{'
  String[] splitedObject = object.split("\\.");
  StringBuilder wrappedObject = new StringBuilder(object.length() + splitedObject.length * 2);
  for (String objectPart : splitedObject) '{'
    if (wrappedObject.length() > 0) '{'
      wrappedObject.append(".");
    '}'
    wrappedObject.append("\"").append(objectPart).append("\"");
  '}'
  return wrappedObject.toString();
'}'

